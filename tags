!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACCEL_CONFIG	arm/moveClassifier/MPU9250.h	58;"	d
ACCEL_CONFIG	arm/moveClassifier_bak/MPU9250.h	58;"	d
ACCEL_CONFIG	arm/sensor/MPU9250.h	58;"	d
ACCEL_CONFIG2	arm/moveClassifier/MPU9250.h	59;"	d
ACCEL_CONFIG2	arm/moveClassifier_bak/MPU9250.h	59;"	d
ACCEL_CONFIG2	arm/sensor/MPU9250.h	59;"	d
ACCEL_XOUT_H	arm/moveClassifier/MPU9250.h	91;"	d
ACCEL_XOUT_H	arm/moveClassifier_bak/MPU9250.h	91;"	d
ACCEL_XOUT_H	arm/sensor/MPU9250.h	91;"	d
ACCEL_XOUT_L	arm/moveClassifier/MPU9250.h	92;"	d
ACCEL_XOUT_L	arm/moveClassifier_bak/MPU9250.h	92;"	d
ACCEL_XOUT_L	arm/sensor/MPU9250.h	92;"	d
ACCEL_YOUT_H	arm/moveClassifier/MPU9250.h	93;"	d
ACCEL_YOUT_H	arm/moveClassifier_bak/MPU9250.h	93;"	d
ACCEL_YOUT_H	arm/sensor/MPU9250.h	93;"	d
ACCEL_YOUT_L	arm/moveClassifier/MPU9250.h	94;"	d
ACCEL_YOUT_L	arm/moveClassifier_bak/MPU9250.h	94;"	d
ACCEL_YOUT_L	arm/sensor/MPU9250.h	94;"	d
ACCEL_ZOUT_H	arm/moveClassifier/MPU9250.h	95;"	d
ACCEL_ZOUT_H	arm/moveClassifier_bak/MPU9250.h	95;"	d
ACCEL_ZOUT_H	arm/sensor/MPU9250.h	95;"	d
ACCEL_ZOUT_L	arm/moveClassifier/MPU9250.h	96;"	d
ACCEL_ZOUT_L	arm/moveClassifier_bak/MPU9250.h	96;"	d
ACCEL_ZOUT_L	arm/sensor/MPU9250.h	96;"	d
ADO	arm/moveClassifier/MPU9250.h	159;"	d
ADO	arm/moveClassifier_bak/MPU9250.h	159;"	d
ADO	arm/sensor/MPU9250.h	159;"	d
AFS_16G	arm/moveClassifier/MPU9250.h	/^  AFS_16G$/;"	e	enum:Ascale
AFS_16G	arm/moveClassifier_bak/MPU9250.h	/^  AFS_16G$/;"	e	enum:Ascale
AFS_16G	arm/sensor/MPU9250.h	/^  AFS_16G$/;"	e	enum:Ascale
AFS_2G	arm/moveClassifier/MPU9250.h	/^  AFS_2G = 0,$/;"	e	enum:Ascale
AFS_2G	arm/moveClassifier_bak/MPU9250.h	/^  AFS_2G = 0,$/;"	e	enum:Ascale
AFS_2G	arm/sensor/MPU9250.h	/^  AFS_2G = 0,$/;"	e	enum:Ascale
AFS_4G	arm/moveClassifier/MPU9250.h	/^  AFS_4G,$/;"	e	enum:Ascale
AFS_4G	arm/moveClassifier_bak/MPU9250.h	/^  AFS_4G,$/;"	e	enum:Ascale
AFS_4G	arm/sensor/MPU9250.h	/^  AFS_4G,$/;"	e	enum:Ascale
AFS_8G	arm/moveClassifier/MPU9250.h	/^  AFS_8G,$/;"	e	enum:Ascale
AFS_8G	arm/moveClassifier_bak/MPU9250.h	/^  AFS_8G,$/;"	e	enum:Ascale
AFS_8G	arm/sensor/MPU9250.h	/^  AFS_8G,$/;"	e	enum:Ascale
AK8963_ADDRESS	arm/moveClassifier/MPU9250.h	11;"	d
AK8963_ADDRESS	arm/moveClassifier_bak/MPU9250.h	11;"	d
AK8963_ADDRESS	arm/sensor/MPU9250.h	11;"	d
AK8963_ASAX	arm/moveClassifier/MPU9250.h	25;"	d
AK8963_ASAX	arm/moveClassifier_bak/MPU9250.h	25;"	d
AK8963_ASAX	arm/sensor/MPU9250.h	25;"	d
AK8963_ASAY	arm/moveClassifier/MPU9250.h	26;"	d
AK8963_ASAY	arm/moveClassifier_bak/MPU9250.h	26;"	d
AK8963_ASAY	arm/sensor/MPU9250.h	26;"	d
AK8963_ASAZ	arm/moveClassifier/MPU9250.h	27;"	d
AK8963_ASAZ	arm/moveClassifier_bak/MPU9250.h	27;"	d
AK8963_ASAZ	arm/sensor/MPU9250.h	27;"	d
AK8963_ASTC	arm/moveClassifier/MPU9250.h	23;"	d
AK8963_ASTC	arm/moveClassifier_bak/MPU9250.h	23;"	d
AK8963_ASTC	arm/sensor/MPU9250.h	23;"	d
AK8963_CNTL	arm/moveClassifier/MPU9250.h	22;"	d
AK8963_CNTL	arm/moveClassifier_bak/MPU9250.h	22;"	d
AK8963_CNTL	arm/sensor/MPU9250.h	22;"	d
AK8963_I2CDIS	arm/moveClassifier/MPU9250.h	24;"	d
AK8963_I2CDIS	arm/moveClassifier_bak/MPU9250.h	24;"	d
AK8963_I2CDIS	arm/sensor/MPU9250.h	24;"	d
AK8963_ST1	arm/moveClassifier/MPU9250.h	14;"	d
AK8963_ST1	arm/moveClassifier_bak/MPU9250.h	14;"	d
AK8963_ST1	arm/sensor/MPU9250.h	14;"	d
AK8963_ST2	arm/moveClassifier/MPU9250.h	21;"	d
AK8963_ST2	arm/moveClassifier_bak/MPU9250.h	21;"	d
AK8963_ST2	arm/sensor/MPU9250.h	21;"	d
AK8963_XOUT_H	arm/moveClassifier/MPU9250.h	16;"	d
AK8963_XOUT_H	arm/moveClassifier_bak/MPU9250.h	16;"	d
AK8963_XOUT_H	arm/sensor/MPU9250.h	16;"	d
AK8963_XOUT_L	arm/moveClassifier/MPU9250.h	15;"	d
AK8963_XOUT_L	arm/moveClassifier_bak/MPU9250.h	15;"	d
AK8963_XOUT_L	arm/sensor/MPU9250.h	15;"	d
AK8963_YOUT_H	arm/moveClassifier/MPU9250.h	18;"	d
AK8963_YOUT_H	arm/moveClassifier_bak/MPU9250.h	18;"	d
AK8963_YOUT_H	arm/sensor/MPU9250.h	18;"	d
AK8963_YOUT_L	arm/moveClassifier/MPU9250.h	17;"	d
AK8963_YOUT_L	arm/moveClassifier_bak/MPU9250.h	17;"	d
AK8963_YOUT_L	arm/sensor/MPU9250.h	17;"	d
AK8963_ZOUT_H	arm/moveClassifier/MPU9250.h	20;"	d
AK8963_ZOUT_H	arm/moveClassifier_bak/MPU9250.h	20;"	d
AK8963_ZOUT_H	arm/sensor/MPU9250.h	20;"	d
AK8963_ZOUT_L	arm/moveClassifier/MPU9250.h	19;"	d
AK8963_ZOUT_L	arm/moveClassifier_bak/MPU9250.h	19;"	d
AK8963_ZOUT_L	arm/sensor/MPU9250.h	19;"	d
AccuEval	gesture_detection/utils/accu_eval.py	/^class AccuEval:$/;"	c
ActionDataLoader	video_detection/util.py	/^class ActionDataLoader():$/;"	c
ActionOptions	gesture_detection/options/action_options.py	/^class ActionOptions(BaseOptions):$/;"	c
Ascale	arm/moveClassifier/MPU9250.h	/^enum Ascale {$/;"	g
Ascale	arm/moveClassifier/MPU9250.h	/^uint8_t Ascale = AFS_2G;     \/\/ AFS_2G, AFS_4G, AFS_8G, AFS_16G$/;"	v
Ascale	arm/moveClassifier_bak/MPU9250.h	/^enum Ascale {$/;"	g
Ascale	arm/moveClassifier_bak/MPU9250.h	/^uint8_t Ascale = AFS_2G;     \/\/ AFS_2G, AFS_4G, AFS_8G, AFS_16G$/;"	v
Ascale	arm/sensor/MPU9250.h	/^enum Ascale {$/;"	g
Ascale	arm/sensor/MPU9250.h	/^uint8_t Ascale = AFS_2G;     \/\/ AFS_2G, AFS_4G, AFS_8G, AFS_16G$/;"	v
BATCH_SIZE	video_detection/main.py	/^BATCH_SIZE= 8 $/;"	v
BalanceLoss2d	gesture_detection/utils/loss.py	/^class BalanceLoss2d(nn.Module):$/;"	c
BaseDataset	gesture_detection/dataset/base_dataset.py	/^class BaseDataset(data.Dataset):$/;"	c
BaseModel	gesture_detection/models/base_model.py	/^class BaseModel():$/;"	c
BaseOptions	gesture_detection/options/base_options.py	/^class BaseOptions():$/;"	c
BaseVisualizer	gesture_detection/visualizer/base_visualizer.py	/^class BaseVisualizer():$/;"	c
BinaryClassifier	arm/moveClassifier/binaryClassifier.cpp	/^BinaryClassifier::BinaryClassifier(const float& threshold, const int& nStep, const vector<int>& index):$/;"	f	class:BinaryClassifier
BinaryClassifier	arm/moveClassifier/binaryClassifier.h	/^class BinaryClassifier{$/;"	c
BinaryClassifier	arm/moveClassifier_bak/binaryClassifier.cpp	/^BinaryClassifier::BinaryClassifier(const float& threshold, const int& nStep, const vector<int>& index):$/;"	f	class:BinaryClassifier
BinaryClassifier	arm/moveClassifier_bak/binaryClassifier.h	/^class BinaryClassifier{$/;"	c
BinaryClassifier	arm/test/include/binaryClassifier.h	/^class BinaryClassifier{$/;"	c
BinaryClassifier	arm/test/src/binaryClassifier/binaryClassifier.cpp	/^BinaryClassifier::BinaryClassifier(const float& threshold, const int& nStep, const vector<int>& index):$/;"	f	class:BinaryClassifier
BinaryClassifier	arm/test/src/binaryClassifier/binaryClassifier.h	/^class BinaryClassifier{$/;"	c
BinaryDataSet	gesture_detection/dataset/binary_dataset.py	/^class BinaryDataSet(BaseDataset):$/;"	c
BinaryModel	gesture_detection/models/binary_model.py	/^class BinaryModel(BaseModel):$/;"	c
CMD	arm/test/Makefile	/^b: CMD  = binaryClassifier$/;"	m
CMD	arm/test/Makefile	/^d: CMD  = dtw$/;"	m
CMD	arm/test/Makefile	/^m: CMD  = moveClassifier$/;"	m
CMDFLAG	arm/test/Makefile	/^b: CMDFLAG = -DTEST_BINARYCLASSIFIER$/;"	m
CMDFLAG	arm/test/Makefile	/^d: CMDFLAG = -DTEST_DTW$/;"	m
CMDFLAG	arm/test/Makefile	/^m: CMDFLAG = -DTEST_MOVECLASSIFIER$/;"	m
CONFIG	arm/moveClassifier/MPU9250.h	56;"	d
CONFIG	arm/moveClassifier_bak/MPU9250.h	56;"	d
CONFIG	arm/sensor/MPU9250.h	56;"	d
Classifier	gesture_detection/classifier/DTW.py	/^class Classifier:$/;"	c
Classifier	gesture_detection/classifier/binary.py	/^class Classifier:$/;"	c
Classifier	gesture_detection/models/network/__init__.py	/^class Classifier(nn.Module):$/;"	c
ConcatDataset	gesture_detection/dataset/concat_dataset.py	/^class ConcatDataset(BaseDataset):$/;"	c
CrossEntropyLoss2d	gesture_detection/utils/loss.py	/^class CrossEntropyLoss2d(nn.Module):$/;"	c
DMP_BANK	arm/moveClassifier/MPU9250.h	140;"	d
DMP_BANK	arm/moveClassifier_bak/MPU9250.h	140;"	d
DMP_BANK	arm/sensor/MPU9250.h	140;"	d
DMP_INT_STATUS	arm/moveClassifier/MPU9250.h	89;"	d
DMP_INT_STATUS	arm/moveClassifier_bak/MPU9250.h	89;"	d
DMP_INT_STATUS	arm/sensor/MPU9250.h	89;"	d
DMP_REG	arm/moveClassifier/MPU9250.h	142;"	d
DMP_REG	arm/moveClassifier_bak/MPU9250.h	142;"	d
DMP_REG	arm/sensor/MPU9250.h	142;"	d
DMP_REG_1	arm/moveClassifier/MPU9250.h	143;"	d
DMP_REG_1	arm/moveClassifier_bak/MPU9250.h	143;"	d
DMP_REG_1	arm/sensor/MPU9250.h	143;"	d
DMP_REG_2	arm/moveClassifier/MPU9250.h	144;"	d
DMP_REG_2	arm/moveClassifier_bak/MPU9250.h	144;"	d
DMP_REG_2	arm/sensor/MPU9250.h	144;"	d
DMP_RW_PNT	arm/moveClassifier/MPU9250.h	141;"	d
DMP_RW_PNT	arm/moveClassifier_bak/MPU9250.h	141;"	d
DMP_RW_PNT	arm/sensor/MPU9250.h	141;"	d
DROPOUT	video_detection/main.py	/^DROPOUT= 0.3$/;"	v
DTW	arm/moveClassifier/dtw.h	/^    DTW(float constraint) : _constraint(constraint) { }$/;"	f	class:DTW
DTW	arm/moveClassifier/dtw.h	/^class DTW $/;"	c
DTW	arm/moveClassifier_bak/dtw.h	/^namespace DTW$/;"	n
DTW	arm/test/include/dtw.h	/^    DTW(float constraint) : _constraint(constraint) { }$/;"	f	class:DTW
DTW	arm/test/include/dtw.h	/^class DTW $/;"	c
DTW	arm/test/src/util/dtw.h	/^    DTW(float constraint) : _constraint(constraint) { }$/;"	f	class:DTW
DTW	arm/test/src/util/dtw.h	/^class DTW $/;"	c
DTW_H	arm/moveClassifier_bak/dtw.h	6;"	d
Datamanager	video_detection/util.py	/^class Datamanager:$/;"	c
Diff2d	gesture_detection/utils/loss.py	/^class Diff2d(nn.Module):$/;"	c
Distance	gesture_detection/utils/loss.py	/^class Distance(nn.Module):$/;"	c
EPOCH	video_detection/main.py	/^EPOCH= 20$/;"	v
EXEC	arm/test/Makefile	/^EXEC     = Test.$(CMD)$/;"	m
EXT_SENS_DATA_00	arm/moveClassifier/MPU9250.h	105;"	d
EXT_SENS_DATA_00	arm/moveClassifier_bak/MPU9250.h	105;"	d
EXT_SENS_DATA_00	arm/sensor/MPU9250.h	105;"	d
EXT_SENS_DATA_01	arm/moveClassifier/MPU9250.h	106;"	d
EXT_SENS_DATA_01	arm/moveClassifier_bak/MPU9250.h	106;"	d
EXT_SENS_DATA_01	arm/sensor/MPU9250.h	106;"	d
EXT_SENS_DATA_02	arm/moveClassifier/MPU9250.h	107;"	d
EXT_SENS_DATA_02	arm/moveClassifier_bak/MPU9250.h	107;"	d
EXT_SENS_DATA_02	arm/sensor/MPU9250.h	107;"	d
EXT_SENS_DATA_03	arm/moveClassifier/MPU9250.h	108;"	d
EXT_SENS_DATA_03	arm/moveClassifier_bak/MPU9250.h	108;"	d
EXT_SENS_DATA_03	arm/sensor/MPU9250.h	108;"	d
EXT_SENS_DATA_04	arm/moveClassifier/MPU9250.h	109;"	d
EXT_SENS_DATA_04	arm/moveClassifier_bak/MPU9250.h	109;"	d
EXT_SENS_DATA_04	arm/sensor/MPU9250.h	109;"	d
EXT_SENS_DATA_05	arm/moveClassifier/MPU9250.h	110;"	d
EXT_SENS_DATA_05	arm/moveClassifier_bak/MPU9250.h	110;"	d
EXT_SENS_DATA_05	arm/sensor/MPU9250.h	110;"	d
EXT_SENS_DATA_06	arm/moveClassifier/MPU9250.h	111;"	d
EXT_SENS_DATA_06	arm/moveClassifier_bak/MPU9250.h	111;"	d
EXT_SENS_DATA_06	arm/sensor/MPU9250.h	111;"	d
EXT_SENS_DATA_07	arm/moveClassifier/MPU9250.h	112;"	d
EXT_SENS_DATA_07	arm/moveClassifier_bak/MPU9250.h	112;"	d
EXT_SENS_DATA_07	arm/sensor/MPU9250.h	112;"	d
EXT_SENS_DATA_08	arm/moveClassifier/MPU9250.h	113;"	d
EXT_SENS_DATA_08	arm/moveClassifier_bak/MPU9250.h	113;"	d
EXT_SENS_DATA_08	arm/sensor/MPU9250.h	113;"	d
EXT_SENS_DATA_09	arm/moveClassifier/MPU9250.h	114;"	d
EXT_SENS_DATA_09	arm/moveClassifier_bak/MPU9250.h	114;"	d
EXT_SENS_DATA_09	arm/sensor/MPU9250.h	114;"	d
EXT_SENS_DATA_10	arm/moveClassifier/MPU9250.h	115;"	d
EXT_SENS_DATA_10	arm/moveClassifier_bak/MPU9250.h	115;"	d
EXT_SENS_DATA_10	arm/sensor/MPU9250.h	115;"	d
EXT_SENS_DATA_11	arm/moveClassifier/MPU9250.h	116;"	d
EXT_SENS_DATA_11	arm/moveClassifier_bak/MPU9250.h	116;"	d
EXT_SENS_DATA_11	arm/sensor/MPU9250.h	116;"	d
EXT_SENS_DATA_12	arm/moveClassifier/MPU9250.h	117;"	d
EXT_SENS_DATA_12	arm/moveClassifier_bak/MPU9250.h	117;"	d
EXT_SENS_DATA_12	arm/sensor/MPU9250.h	117;"	d
EXT_SENS_DATA_13	arm/moveClassifier/MPU9250.h	118;"	d
EXT_SENS_DATA_13	arm/moveClassifier_bak/MPU9250.h	118;"	d
EXT_SENS_DATA_13	arm/sensor/MPU9250.h	118;"	d
EXT_SENS_DATA_14	arm/moveClassifier/MPU9250.h	119;"	d
EXT_SENS_DATA_14	arm/moveClassifier_bak/MPU9250.h	119;"	d
EXT_SENS_DATA_14	arm/sensor/MPU9250.h	119;"	d
EXT_SENS_DATA_15	arm/moveClassifier/MPU9250.h	120;"	d
EXT_SENS_DATA_15	arm/moveClassifier_bak/MPU9250.h	120;"	d
EXT_SENS_DATA_15	arm/sensor/MPU9250.h	120;"	d
EXT_SENS_DATA_16	arm/moveClassifier/MPU9250.h	121;"	d
EXT_SENS_DATA_16	arm/moveClassifier_bak/MPU9250.h	121;"	d
EXT_SENS_DATA_16	arm/sensor/MPU9250.h	121;"	d
EXT_SENS_DATA_17	arm/moveClassifier/MPU9250.h	122;"	d
EXT_SENS_DATA_17	arm/moveClassifier_bak/MPU9250.h	122;"	d
EXT_SENS_DATA_17	arm/sensor/MPU9250.h	122;"	d
EXT_SENS_DATA_18	arm/moveClassifier/MPU9250.h	123;"	d
EXT_SENS_DATA_18	arm/moveClassifier_bak/MPU9250.h	123;"	d
EXT_SENS_DATA_18	arm/sensor/MPU9250.h	123;"	d
EXT_SENS_DATA_19	arm/moveClassifier/MPU9250.h	124;"	d
EXT_SENS_DATA_19	arm/moveClassifier_bak/MPU9250.h	124;"	d
EXT_SENS_DATA_19	arm/sensor/MPU9250.h	124;"	d
EXT_SENS_DATA_20	arm/moveClassifier/MPU9250.h	125;"	d
EXT_SENS_DATA_20	arm/moveClassifier_bak/MPU9250.h	125;"	d
EXT_SENS_DATA_20	arm/sensor/MPU9250.h	125;"	d
EXT_SENS_DATA_21	arm/moveClassifier/MPU9250.h	126;"	d
EXT_SENS_DATA_21	arm/moveClassifier_bak/MPU9250.h	126;"	d
EXT_SENS_DATA_21	arm/sensor/MPU9250.h	126;"	d
EXT_SENS_DATA_22	arm/moveClassifier/MPU9250.h	127;"	d
EXT_SENS_DATA_22	arm/moveClassifier_bak/MPU9250.h	127;"	d
EXT_SENS_DATA_22	arm/sensor/MPU9250.h	127;"	d
EXT_SENS_DATA_23	arm/moveClassifier/MPU9250.h	128;"	d
EXT_SENS_DATA_23	arm/moveClassifier_bak/MPU9250.h	128;"	d
EXT_SENS_DATA_23	arm/sensor/MPU9250.h	128;"	d
Entropy	gesture_detection/utils/loss.py	/^class Entropy(nn.Module):$/;"	c
EvaluateWarpingCost	arm/moveClassifier_bak/dtw.cpp	/^float SimpleDTW::EvaluateWarpingCost(std::vector< std::vector<float> >& sequence_1, std::vector< std::vector<float> >& sequence_2)$/;"	f	class:SimpleDTW
FIFO_COUNTH	arm/moveClassifier/MPU9250.h	145;"	d
FIFO_COUNTH	arm/moveClassifier_bak/MPU9250.h	145;"	d
FIFO_COUNTH	arm/sensor/MPU9250.h	145;"	d
FIFO_COUNTL	arm/moveClassifier/MPU9250.h	146;"	d
FIFO_COUNTL	arm/moveClassifier_bak/MPU9250.h	146;"	d
FIFO_COUNTL	arm/sensor/MPU9250.h	146;"	d
FIFO_EN	arm/moveClassifier/MPU9250.h	67;"	d
FIFO_EN	arm/moveClassifier_bak/MPU9250.h	67;"	d
FIFO_EN	arm/sensor/MPU9250.h	67;"	d
FIFO_R_W	arm/moveClassifier/MPU9250.h	147;"	d
FIFO_R_W	arm/moveClassifier_bak/MPU9250.h	147;"	d
FIFO_R_W	arm/sensor/MPU9250.h	147;"	d
Filter	gesture_detection/filter/__init__.py	/^class Filter:$/;"	c
GANLoss	gesture_detection/utils/loss.py	/^class GANLoss(nn.Module):$/;"	c
GFS_1000DPS	arm/moveClassifier/MPU9250.h	/^  GFS_1000DPS,$/;"	e	enum:Gscale
GFS_1000DPS	arm/moveClassifier_bak/MPU9250.h	/^  GFS_1000DPS,$/;"	e	enum:Gscale
GFS_1000DPS	arm/sensor/MPU9250.h	/^  GFS_1000DPS,$/;"	e	enum:Gscale
GFS_2000DPS	arm/moveClassifier/MPU9250.h	/^  GFS_2000DPS$/;"	e	enum:Gscale
GFS_2000DPS	arm/moveClassifier_bak/MPU9250.h	/^  GFS_2000DPS$/;"	e	enum:Gscale
GFS_2000DPS	arm/sensor/MPU9250.h	/^  GFS_2000DPS$/;"	e	enum:Gscale
GFS_250DPS	arm/moveClassifier/MPU9250.h	/^  GFS_250DPS = 0,$/;"	e	enum:Gscale
GFS_250DPS	arm/moveClassifier_bak/MPU9250.h	/^  GFS_250DPS = 0,$/;"	e	enum:Gscale
GFS_250DPS	arm/sensor/MPU9250.h	/^  GFS_250DPS = 0,$/;"	e	enum:Gscale
GFS_500DPS	arm/moveClassifier/MPU9250.h	/^  GFS_500DPS,$/;"	e	enum:Gscale
GFS_500DPS	arm/moveClassifier_bak/MPU9250.h	/^  GFS_500DPS,$/;"	e	enum:Gscale
GFS_500DPS	arm/sensor/MPU9250.h	/^  GFS_500DPS,$/;"	e	enum:Gscale
GYRO_CONFIG	arm/moveClassifier/MPU9250.h	57;"	d
GYRO_CONFIG	arm/moveClassifier_bak/MPU9250.h	57;"	d
GYRO_CONFIG	arm/sensor/MPU9250.h	57;"	d
GYRO_XOUT_H	arm/moveClassifier/MPU9250.h	99;"	d
GYRO_XOUT_H	arm/moveClassifier_bak/MPU9250.h	99;"	d
GYRO_XOUT_H	arm/sensor/MPU9250.h	99;"	d
GYRO_XOUT_L	arm/moveClassifier/MPU9250.h	100;"	d
GYRO_XOUT_L	arm/moveClassifier_bak/MPU9250.h	100;"	d
GYRO_XOUT_L	arm/sensor/MPU9250.h	100;"	d
GYRO_YOUT_H	arm/moveClassifier/MPU9250.h	101;"	d
GYRO_YOUT_H	arm/moveClassifier_bak/MPU9250.h	101;"	d
GYRO_YOUT_H	arm/sensor/MPU9250.h	101;"	d
GYRO_YOUT_L	arm/moveClassifier/MPU9250.h	102;"	d
GYRO_YOUT_L	arm/moveClassifier_bak/MPU9250.h	102;"	d
GYRO_YOUT_L	arm/sensor/MPU9250.h	102;"	d
GYRO_ZOUT_H	arm/moveClassifier/MPU9250.h	103;"	d
GYRO_ZOUT_H	arm/moveClassifier_bak/MPU9250.h	103;"	d
GYRO_ZOUT_H	arm/sensor/MPU9250.h	103;"	d
GYRO_ZOUT_L	arm/moveClassifier/MPU9250.h	104;"	d
GYRO_ZOUT_L	arm/moveClassifier_bak/MPU9250.h	104;"	d
GYRO_ZOUT_L	arm/sensor/MPU9250.h	104;"	d
GaussianNoise	gesture_detection/models/network/__init__.py	/^class GaussianNoise(nn.Module):$/;"	c
Gesture	arm/moveClassifier/gesture.h	/^    Gesture(const string& action): _action(action){};$/;"	f	class:Gesture
Gesture	arm/moveClassifier/gesture.h	/^class Gesture{$/;"	c
Gesture	arm/moveClassifier_bak/gesture.h	/^    Gesture(const string& action): _action(action){};$/;"	f	class:Gesture
Gesture	arm/moveClassifier_bak/gesture.h	/^class Gesture{$/;"	c
Gesture	arm/test/include/gesture.h	/^    Gesture(const string& action): _action(action){};$/;"	f	class:Gesture
Gesture	arm/test/include/gesture.h	/^class Gesture{$/;"	c
Gesture	arm/test/src/util/gesture.h	/^    Gesture(const string& action): _action(action){};$/;"	f	class:Gesture
Gesture	arm/test/src/util/gesture.h	/^class Gesture{$/;"	c
GetDataIndex	arm/moveClassifier_bak/dtw.h	/^    inline size_t GetDataIndex(size_t x, size_t y)$/;"	f	class:DTW::SimpleDTW
GetFromDTWMatrix	arm/moveClassifier_bak/dtw.h	/^    inline float GetFromDTWMatrix(size_t x, size_t y)$/;"	f	class:DTW::SimpleDTW
Gscale	arm/moveClassifier/MPU9250.h	/^enum Gscale {$/;"	g
Gscale	arm/moveClassifier/MPU9250.h	/^uint8_t Gscale = GFS_250DPS; \/\/ GFS_250DPS, GFS_500DPS, GFS_1000DPS, GFS_2000DPS$/;"	v
Gscale	arm/moveClassifier_bak/MPU9250.h	/^enum Gscale {$/;"	g
Gscale	arm/moveClassifier_bak/MPU9250.h	/^uint8_t Gscale = GFS_250DPS; \/\/ GFS_250DPS, GFS_500DPS, GFS_1000DPS, GFS_2000DPS$/;"	v
Gscale	arm/sensor/MPU9250.h	/^enum Gscale {$/;"	g
Gscale	arm/sensor/MPU9250.h	/^uint8_t Gscale = GFS_250DPS; \/\/ GFS_250DPS, GFS_500DPS, GFS_1000DPS, GFS_2000DPS$/;"	v
GyroMeasDrift	arm/moveClassifier/MPU9250.h	/^float GyroMeasDrift = PI * (1.0f \/ 180.0f);      \/\/ gyroscope measurement drift in rad\/s\/s (start at 0.0 deg\/s\/s)$/;"	v
GyroMeasDrift	arm/moveClassifier_bak/MPU9250.h	/^float GyroMeasDrift = PI * (1.0f \/ 180.0f);      \/\/ gyroscope measurement drift in rad\/s\/s (start at 0.0 deg\/s\/s)$/;"	v
GyroMeasDrift	arm/sensor/MPU9250.h	/^float GyroMeasDrift = PI * (1.0f \/ 180.0f);      \/\/ gyroscope measurement drift in rad\/s\/s (start at 0.0 deg\/s\/s)$/;"	v
GyroMeasError	arm/moveClassifier/MPU9250.h	/^float GyroMeasError = PI * (60.0f \/ 180.0f);     \/\/ gyroscope measurement error in rads\/s (start at 60 deg\/s), then reduce after ~10 s to 3$/;"	v
GyroMeasError	arm/moveClassifier_bak/MPU9250.h	/^float GyroMeasError = PI * (60.0f \/ 180.0f);     \/\/ gyroscope measurement error in rads\/s (start at 60 deg\/s), then reduce after ~10 s to 3$/;"	v
GyroMeasError	arm/sensor/MPU9250.h	/^float GyroMeasError = PI * (60.0f \/ 180.0f);     \/\/ gyroscope measurement error in rads\/s (start at 60 deg\/s), then reduce after ~10 s to 3$/;"	v
I2C_MST_CTRL	arm/moveClassifier/MPU9250.h	68;"	d
I2C_MST_CTRL	arm/moveClassifier_bak/MPU9250.h	68;"	d
I2C_MST_CTRL	arm/sensor/MPU9250.h	68;"	d
I2C_MST_DELAY_CTRL	arm/moveClassifier/MPU9250.h	134;"	d
I2C_MST_DELAY_CTRL	arm/moveClassifier_bak/MPU9250.h	134;"	d
I2C_MST_DELAY_CTRL	arm/sensor/MPU9250.h	134;"	d
I2C_MST_STATUS	arm/moveClassifier/MPU9250.h	86;"	d
I2C_MST_STATUS	arm/moveClassifier_bak/MPU9250.h	86;"	d
I2C_MST_STATUS	arm/sensor/MPU9250.h	86;"	d
I2C_SLV0_ADDR	arm/moveClassifier/MPU9250.h	69;"	d
I2C_SLV0_ADDR	arm/moveClassifier_bak/MPU9250.h	69;"	d
I2C_SLV0_ADDR	arm/sensor/MPU9250.h	69;"	d
I2C_SLV0_CTRL	arm/moveClassifier/MPU9250.h	71;"	d
I2C_SLV0_CTRL	arm/moveClassifier_bak/MPU9250.h	71;"	d
I2C_SLV0_CTRL	arm/sensor/MPU9250.h	71;"	d
I2C_SLV0_DO	arm/moveClassifier/MPU9250.h	130;"	d
I2C_SLV0_DO	arm/moveClassifier_bak/MPU9250.h	130;"	d
I2C_SLV0_DO	arm/sensor/MPU9250.h	130;"	d
I2C_SLV0_REG	arm/moveClassifier/MPU9250.h	70;"	d
I2C_SLV0_REG	arm/moveClassifier_bak/MPU9250.h	70;"	d
I2C_SLV0_REG	arm/sensor/MPU9250.h	70;"	d
I2C_SLV1_ADDR	arm/moveClassifier/MPU9250.h	72;"	d
I2C_SLV1_ADDR	arm/moveClassifier_bak/MPU9250.h	72;"	d
I2C_SLV1_ADDR	arm/sensor/MPU9250.h	72;"	d
I2C_SLV1_CTRL	arm/moveClassifier/MPU9250.h	74;"	d
I2C_SLV1_CTRL	arm/moveClassifier_bak/MPU9250.h	74;"	d
I2C_SLV1_CTRL	arm/sensor/MPU9250.h	74;"	d
I2C_SLV1_DO	arm/moveClassifier/MPU9250.h	131;"	d
I2C_SLV1_DO	arm/moveClassifier_bak/MPU9250.h	131;"	d
I2C_SLV1_DO	arm/sensor/MPU9250.h	131;"	d
I2C_SLV1_REG	arm/moveClassifier/MPU9250.h	73;"	d
I2C_SLV1_REG	arm/moveClassifier_bak/MPU9250.h	73;"	d
I2C_SLV1_REG	arm/sensor/MPU9250.h	73;"	d
I2C_SLV2_ADDR	arm/moveClassifier/MPU9250.h	75;"	d
I2C_SLV2_ADDR	arm/moveClassifier_bak/MPU9250.h	75;"	d
I2C_SLV2_ADDR	arm/sensor/MPU9250.h	75;"	d
I2C_SLV2_CTRL	arm/moveClassifier/MPU9250.h	77;"	d
I2C_SLV2_CTRL	arm/moveClassifier_bak/MPU9250.h	77;"	d
I2C_SLV2_CTRL	arm/sensor/MPU9250.h	77;"	d
I2C_SLV2_DO	arm/moveClassifier/MPU9250.h	132;"	d
I2C_SLV2_DO	arm/moveClassifier_bak/MPU9250.h	132;"	d
I2C_SLV2_DO	arm/sensor/MPU9250.h	132;"	d
I2C_SLV2_REG	arm/moveClassifier/MPU9250.h	76;"	d
I2C_SLV2_REG	arm/moveClassifier_bak/MPU9250.h	76;"	d
I2C_SLV2_REG	arm/sensor/MPU9250.h	76;"	d
I2C_SLV3_ADDR	arm/moveClassifier/MPU9250.h	78;"	d
I2C_SLV3_ADDR	arm/moveClassifier_bak/MPU9250.h	78;"	d
I2C_SLV3_ADDR	arm/sensor/MPU9250.h	78;"	d
I2C_SLV3_CTRL	arm/moveClassifier/MPU9250.h	80;"	d
I2C_SLV3_CTRL	arm/moveClassifier_bak/MPU9250.h	80;"	d
I2C_SLV3_CTRL	arm/sensor/MPU9250.h	80;"	d
I2C_SLV3_DO	arm/moveClassifier/MPU9250.h	133;"	d
I2C_SLV3_DO	arm/moveClassifier_bak/MPU9250.h	133;"	d
I2C_SLV3_DO	arm/sensor/MPU9250.h	133;"	d
I2C_SLV3_REG	arm/moveClassifier/MPU9250.h	79;"	d
I2C_SLV3_REG	arm/moveClassifier_bak/MPU9250.h	79;"	d
I2C_SLV3_REG	arm/sensor/MPU9250.h	79;"	d
I2C_SLV4_ADDR	arm/moveClassifier/MPU9250.h	81;"	d
I2C_SLV4_ADDR	arm/moveClassifier_bak/MPU9250.h	81;"	d
I2C_SLV4_ADDR	arm/sensor/MPU9250.h	81;"	d
I2C_SLV4_CTRL	arm/moveClassifier/MPU9250.h	84;"	d
I2C_SLV4_CTRL	arm/moveClassifier_bak/MPU9250.h	84;"	d
I2C_SLV4_CTRL	arm/sensor/MPU9250.h	84;"	d
I2C_SLV4_DI	arm/moveClassifier/MPU9250.h	85;"	d
I2C_SLV4_DI	arm/moveClassifier_bak/MPU9250.h	85;"	d
I2C_SLV4_DI	arm/sensor/MPU9250.h	85;"	d
I2C_SLV4_DO	arm/moveClassifier/MPU9250.h	83;"	d
I2C_SLV4_DO	arm/moveClassifier_bak/MPU9250.h	83;"	d
I2C_SLV4_DO	arm/sensor/MPU9250.h	83;"	d
I2C_SLV4_REG	arm/moveClassifier/MPU9250.h	82;"	d
I2C_SLV4_REG	arm/moveClassifier_bak/MPU9250.h	82;"	d
I2C_SLV4_REG	arm/sensor/MPU9250.h	82;"	d
IMAGE_SIZE	video_detection/main.py	/^IMAGE_SIZE = (224,224)$/;"	v
INF	arm/moveClassifier/dtw.h	/^    enum { INF = INT_MAX }; \/\/some big number$/;"	e	enum:DTW::__anon1
INF	arm/moveClassifier_bak/vectordtw.h	/^	enum { INF = 100000000 }; \/\/some big number$/;"	e	enum:VectorDTW::__anon2
INF	arm/test/include/dtw.h	/^    enum { INF = INT_MAX }; \/\/some big number$/;"	e	enum:DTW::__anon3
INF	arm/test/src/util/dtw.h	/^    enum { INF = INT_MAX }; \/\/some big number$/;"	e	enum:DTW::__anon4
INFO	arm/moveClassifier/MPU9250.h	13;"	d
INFO	arm/moveClassifier_bak/MPU9250.h	13;"	d
INFO	arm/sensor/MPU9250.h	13;"	d
INT_ENABLE	arm/moveClassifier/MPU9250.h	88;"	d
INT_ENABLE	arm/moveClassifier_bak/MPU9250.h	88;"	d
INT_ENABLE	arm/sensor/MPU9250.h	88;"	d
INT_PIN_CFG	arm/moveClassifier/MPU9250.h	87;"	d
INT_PIN_CFG	arm/moveClassifier_bak/MPU9250.h	87;"	d
INT_PIN_CFG	arm/sensor/MPU9250.h	87;"	d
INT_STATUS	arm/moveClassifier/MPU9250.h	90;"	d
INT_STATUS	arm/moveClassifier_bak/MPU9250.h	90;"	d
INT_STATUS	arm/sensor/MPU9250.h	90;"	d
ImageDataset	video_detection/util.py	/^class ImageDataset(Dataset):$/;"	c
Image_Classifier	video_detection/util.py	/^class Image_Classifier(nn.Module):$/;"	c
Initialize	arm/moveClassifier_bak/dtw.cpp	/^void SimpleDTW::Initialize(size_t x_size, size_t y_size)$/;"	f	class:SimpleDTW
Ki	arm/moveClassifier/MPU9250.h	220;"	d
Ki	arm/moveClassifier_bak/MPU9250.h	220;"	d
Ki	arm/sensor/MPU9250.h	220;"	d
Kp	arm/moveClassifier/MPU9250.h	219;"	d
Kp	arm/moveClassifier_bak/MPU9250.h	219;"	d
Kp	arm/sensor/MPU9250.h	219;"	d
LAYER_N	video_detection/main.py	/^LAYER_N = 2$/;"	v
LEARNING_RATE	video_detection/main.py	/^LEARNING_RATE = 1E-4$/;"	v
LIBFILES	arm/test/Makefile	/^LIBFILES = $(addsuffix .a, $(addprefix lib, $(LIBPKGS)))$/;"	m
LIBPKGS	arm/test/Makefile	/^LIBPKGS  = binaryClassifier moveClassifier util$/;"	m
LIBS	arm/test/Makefile	/^LIBS     = $(addprefix -l, $(LIBPKGS))$/;"	m
LP_ACCEL_ODR	arm/moveClassifier/MPU9250.h	60;"	d
LP_ACCEL_ODR	arm/moveClassifier_bak/MPU9250.h	60;"	d
LP_ACCEL_ODR	arm/sensor/MPU9250.h	60;"	d
MAIN	arm/test/Makefile	/^MAIN     = main$/;"	m
MFS_14BITS	arm/moveClassifier/MPU9250.h	/^  MFS_14BITS = 0, \/\/ 0.6 mG per LSB$/;"	e	enum:Mscale
MFS_14BITS	arm/moveClassifier_bak/MPU9250.h	/^  MFS_14BITS = 0, \/\/ 0.6 mG per LSB$/;"	e	enum:Mscale
MFS_14BITS	arm/sensor/MPU9250.h	/^  MFS_14BITS = 0, \/\/ 0.6 mG per LSB$/;"	e	enum:Mscale
MFS_16BITS	arm/moveClassifier/MPU9250.h	/^  MFS_16BITS      \/\/ 0.15 mG per LSB$/;"	e	enum:Mscale
MFS_16BITS	arm/moveClassifier_bak/MPU9250.h	/^  MFS_16BITS      \/\/ 0.15 mG per LSB$/;"	e	enum:Mscale
MFS_16BITS	arm/sensor/MPU9250.h	/^  MFS_16BITS      \/\/ 0.15 mG per LSB$/;"	e	enum:Mscale
MOT_DETECT_CTRL	arm/moveClassifier/MPU9250.h	136;"	d
MOT_DETECT_CTRL	arm/moveClassifier_bak/MPU9250.h	136;"	d
MOT_DETECT_CTRL	arm/sensor/MPU9250.h	136;"	d
MOT_DETECT_STATUS	arm/moveClassifier/MPU9250.h	129;"	d
MOT_DETECT_STATUS	arm/moveClassifier_bak/MPU9250.h	129;"	d
MOT_DETECT_STATUS	arm/sensor/MPU9250.h	129;"	d
MOT_DUR	arm/moveClassifier/MPU9250.h	63;"	d
MOT_DUR	arm/moveClassifier_bak/MPU9250.h	63;"	d
MOT_DUR	arm/sensor/MPU9250.h	63;"	d
MPU9250	arm/moveClassifier/MPU9250.h	/^class MPU9250 {$/;"	c
MPU9250	arm/moveClassifier_bak/MPU9250.h	/^class MPU9250 {$/;"	c
MPU9250	arm/sensor/MPU9250.h	/^class MPU9250 {$/;"	c
MPU9250SelfTest	arm/moveClassifier/MPU9250.h	/^void MPU9250SelfTest(float * destination) \/\/ Should return percent deviation from factory trim values, +\/- 14 or less deviation is a pass$/;"	f	class:MPU9250
MPU9250SelfTest	arm/moveClassifier_bak/MPU9250.h	/^void MPU9250SelfTest(float * destination) \/\/ Should return percent deviation from factory trim values, +\/- 14 or less deviation is a pass$/;"	f	class:MPU9250
MPU9250SelfTest	arm/sensor/MPU9250.h	/^void MPU9250SelfTest(float * destination) \/\/ Should return percent deviation from factory trim values, +\/- 14 or less deviation is a pass$/;"	f	class:MPU9250
MPU9250_ADDRESS	arm/moveClassifier/MPU9250.h	161;"	d
MPU9250_ADDRESS	arm/moveClassifier/MPU9250.h	163;"	d
MPU9250_ADDRESS	arm/moveClassifier_bak/MPU9250.h	161;"	d
MPU9250_ADDRESS	arm/moveClassifier_bak/MPU9250.h	163;"	d
MPU9250_ADDRESS	arm/sensor/MPU9250.h	161;"	d
MPU9250_ADDRESS	arm/sensor/MPU9250.h	163;"	d
MPU9250_H	arm/moveClassifier/MPU9250.h	2;"	d
MPU9250_H	arm/moveClassifier_bak/MPU9250.h	2;"	d
MPU9250_H	arm/sensor/MPU9250.h	2;"	d
MadgwickQuaternionUpdate	arm/moveClassifier/MPU9250.h	/^        void MadgwickQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz)$/;"	f	class:MPU9250
MadgwickQuaternionUpdate	arm/moveClassifier_bak/MPU9250.h	/^        void MadgwickQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz)$/;"	f	class:MPU9250
MadgwickQuaternionUpdate	arm/sensor/MPU9250.h	/^        void MadgwickQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz)$/;"	f	class:MPU9250
MahonyQuaternionUpdate	arm/moveClassifier/MPU9250.h	/^            void MahonyQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz)$/;"	f	class:MPU9250
MahonyQuaternionUpdate	arm/moveClassifier_bak/MPU9250.h	/^            void MahonyQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz)$/;"	f	class:MPU9250
MahonyQuaternionUpdate	arm/sensor/MPU9250.h	/^            void MahonyQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz)$/;"	f	class:MPU9250
MainOptions	gesture_detection/options/main_options.py	/^class MainOptions(BaseOptions):$/;"	c
Mmode	arm/moveClassifier/MPU9250.h	/^uint8_t Mmode = 0x06;        \/\/ Either 8 Hz 0x02) or 100 Hz (0x06) magnetometer data ODR  $/;"	v
Mmode	arm/moveClassifier_bak/MPU9250.h	/^uint8_t Mmode = 0x06;        \/\/ Either 8 Hz 0x02) or 100 Hz (0x06) magnetometer data ODR  $/;"	v
Mmode	arm/sensor/MPU9250.h	/^uint8_t Mmode = 0x06;        \/\/ Either 8 Hz 0x02) or 100 Hz (0x06) magnetometer data ODR  $/;"	v
ModelVisualizer	gesture_detection/visualizer/model_visualizer.py	/^class ModelVisualizer(BaseVisualizer):$/;"	c
MoveClassifier	arm/moveClassifier/moveClassifier.cpp	/^MoveClassifier::MoveClassifier(const float& threshold): _threshold(threshold){$/;"	f	class:MoveClassifier
MoveClassifier	arm/moveClassifier/moveClassifier.h	/^class MoveClassifier{$/;"	c
MoveClassifier	arm/moveClassifier_bak/classifier.cpp	/^MoveClassifier::MoveClassifier(const float& threshold): _threshold(threshold), _dtwEval(this->euclidean_distance){$/;"	f	class:MoveClassifier
MoveClassifier	arm/moveClassifier_bak/classifier.h	/^class MoveClassifier{$/;"	c
MoveClassifier	arm/test/include/moveClassifier.h	/^class MoveClassifier{$/;"	c
MoveClassifier	arm/test/src/moveClassifier/moveClassifier.cpp	/^MoveClassifier::MoveClassifier(const float& threshold): _threshold(threshold){$/;"	f	class:MoveClassifier
MoveClassifier	arm/test/src/moveClassifier/moveClassifier.h	/^class MoveClassifier{$/;"	c
MovieDataLoader	video_detection/util.py	/^class MovieDataLoader():$/;"	c
Movie_Classifier	video_detection/util.py	/^class Movie_Classifier(nn.Module):$/;"	c
Mscale	arm/moveClassifier/MPU9250.h	/^enum Mscale {$/;"	g
Mscale	arm/moveClassifier/MPU9250.h	/^uint8_t Mscale = MFS_16BITS; \/\/ MFS_14BITS or MFS_16BITS, 14-bit or 16-bit magnetometer resolution$/;"	v
Mscale	arm/moveClassifier_bak/MPU9250.h	/^enum Mscale {$/;"	g
Mscale	arm/moveClassifier_bak/MPU9250.h	/^uint8_t Mscale = MFS_16BITS; \/\/ MFS_14BITS or MFS_16BITS, 14-bit or 16-bit magnetometer resolution$/;"	v
Mscale	arm/sensor/MPU9250.h	/^enum Mscale {$/;"	g
Mscale	arm/sensor/MPU9250.h	/^uint8_t Mscale = MFS_16BITS; \/\/ MFS_14BITS or MFS_16BITS, 14-bit or 16-bit magnetometer resolution$/;"	v
Now	arm/moveClassifier/MPU9250.h	/^int lastUpdate = 0, firstUpdate = 0, Now = 0;    \/\/ used to calculate integration interval                               \/\/ used to calculate integration interval$/;"	v
Now	arm/moveClassifier_bak/MPU9250.h	/^int lastUpdate = 0, firstUpdate = 0, Now = 0;    \/\/ used to calculate integration interval                               \/\/ used to calculate integration interval$/;"	v
Now	arm/sensor/MPU9250.h	/^int lastUpdate = 0, firstUpdate = 0, Now = 0;    \/\/ used to calculate integration interval                               \/\/ used to calculate integration interval$/;"	v
OUTPUT_PATH	video_detection/main.py	/^OUTPUT_PATH= '.\/model\/model.pt'$/;"	v
PI	arm/moveClassifier/MPU9250.h	/^float PI = 3.14159265358979323846f;$/;"	v
PI	arm/moveClassifier_bak/MPU9250.h	/^float PI = 3.14159265358979323846f;$/;"	v
PI	arm/sensor/MPU9250.h	/^float PI = 3.14159265358979323846f;$/;"	v
PWR_MGMT_1	arm/moveClassifier/MPU9250.h	138;"	d
PWR_MGMT_1	arm/moveClassifier_bak/MPU9250.h	138;"	d
PWR_MGMT_1	arm/sensor/MPU9250.h	138;"	d
PWR_MGMT_2	arm/moveClassifier/MPU9250.h	139;"	d
PWR_MGMT_2	arm/moveClassifier_bak/MPU9250.h	139;"	d
PWR_MGMT_2	arm/sensor/MPU9250.h	139;"	d
Painter	gesture_detection/visualizer/painter.py	/^class Painter():$/;"	c
Point	arm/moveClassifier/point.h	/^	Point(): v0(0), v1(0), v2(0), v3(0), v4(0), v5(0), v6(0), v7(0), v8(0), v9(0), v10(0), v11(0), v12(0), v13(0), v14(0), v15(0){};$/;"	f	class:Point
Point	arm/moveClassifier/point.h	/^	Point(const float& v0, const float& v1, const float& v2, const float& v3, const float& v4, const float& v5, const float& v6, const float& v7, const float& v8, const float& v9, const float& v10, const float& v11, const float& v12, const float& v13, const float& v14, const float& v15): v0(v0), v1(v1), v2(v2), v3(v3), v4(v4), v5(v5), v6(v6), v7(v7), v8(v8), v9(v9), v10(v10), v11(v11), v12(v12), v13(v13), v14(v14), v15(v15){};$/;"	f	class:Point
Point	arm/moveClassifier/point.h	/^	Point(const int& i): v0(i), v1(i), v2(i), v3(i), v4(i), v5(i), v6(i), v7(i), v8(i), v9(i), v10(i), v11(i), v12(i), v13(i), v14(i), v15(i){};$/;"	f	class:Point
Point	arm/moveClassifier/point.h	/^class Point $/;"	c
Point	arm/moveClassifier_bak/point.h	/^	Point(): v0(0), v1(0), v2(0), v3(0), v4(0), v5(0), v6(0), v7(0), v8(0), v9(0), v10(0), v11(0), v12(0), v13(0), v14(0), v15(0){};$/;"	f	class:Point
Point	arm/moveClassifier_bak/point.h	/^	Point(const float& v0, const float& v1, const float& v2, const float& v3, const float& v4, const float& v5, const float& v6, const float& v7, const float& v8, const float& v9, const float& v10, const float& v11, const float& v12, const float& v13, const float& v14, const float& v15): v0(v0), v1(v1), v2(v2), v3(v3), v4(v4), v5(v5), v6(v6), v7(v7), v8(v8), v9(v9), v10(v10), v11(v11), v12(v12), v13(v13), v14(v14), v15(v15){};$/;"	f	class:Point
Point	arm/moveClassifier_bak/point.h	/^	Point(const int& i): v0(i), v1(i), v2(i), v3(i), v4(i), v5(i), v6(i), v7(i), v8(i), v9(i), v10(i), v11(i), v12(i), v13(i), v14(i), v15(i){};$/;"	f	class:Point
Point	arm/moveClassifier_bak/point.h	/^class Point $/;"	c
Point	arm/test/include/point.h	/^	Point(): v0(0), v1(0), v2(0), v3(0), v4(0), v5(0), v6(0), v7(0), v8(0), v9(0), v10(0), v11(0), v12(0), v13(0), v14(0), v15(0){};$/;"	f	class:Point
Point	arm/test/include/point.h	/^	Point(const float& v0, const float& v1, const float& v2, const float& v3, const float& v4, const float& v5, const float& v6, const float& v7, const float& v8, const float& v9, const float& v10, const float& v11, const float& v12, const float& v13, const float& v14, const float& v15): v0(v0), v1(v1), v2(v2), v3(v3), v4(v4), v5(v5), v6(v6), v7(v7), v8(v8), v9(v9), v10(v10), v11(v11), v12(v12), v13(v13), v14(v14), v15(v15){};$/;"	f	class:Point
Point	arm/test/include/point.h	/^	Point(const int& i): v0(i), v1(i), v2(i), v3(i), v4(i), v5(i), v6(i), v7(i), v8(i), v9(i), v10(i), v11(i), v12(i), v13(i), v14(i), v15(i){};$/;"	f	class:Point
Point	arm/test/include/point.h	/^class Point $/;"	c
Point	arm/test/src/util/point.h	/^	Point(): v0(0), v1(0), v2(0), v3(0), v4(0), v5(0), v6(0), v7(0), v8(0), v9(0), v10(0), v11(0), v12(0), v13(0), v14(0), v15(0){};$/;"	f	class:Point
Point	arm/test/src/util/point.h	/^	Point(const float& v0, const float& v1, const float& v2, const float& v3, const float& v4, const float& v5, const float& v6, const float& v7, const float& v8, const float& v9, const float& v10, const float& v11, const float& v12, const float& v13, const float& v14, const float& v15): v0(v0), v1(v1), v2(v2), v3(v3), v4(v4), v5(v5), v6(v6), v7(v7), v8(v8), v9(v9), v10(v10), v11(v11), v12(v12), v13(v13), v14(v14), v15(v15){};$/;"	f	class:Point
Point	arm/test/src/util/point.h	/^	Point(const int& i): v0(i), v1(i), v2(i), v3(i), v4(i), v5(i), v6(i), v7(i), v8(i), v9(i), v10(i), v11(i), v12(i), v13(i), v14(i), v15(i){};$/;"	f	class:Point
Point	arm/test/src/util/point.h	/^class Point $/;"	c
PredictOptions	gesture_detection/options/predict_options.py	/^class PredictOptions(BaseOptions):$/;"	c
ProgressVisualizer	gesture_detection/visualizer/progress_visualizer.py	/^class ProgressVisualizer(BaseVisualizer):$/;"	c
Queue	gesture_detection/utils/utils.py	/^class Queue:$/;"	c
Recorder	gesture_detection/recorder/__init__.py	/^class Recorder():$/;"	c
RecorderOptions	gesture_detection/options/record_options.py	/^class RecorderOptions(BaseOptions):$/;"	c
SAVE_TEST_PATH	video_detection/main.py	/^SAVE_TEST_PATH = '.\/data\/test_x.npy'$/;"	v
SAVE_TRAIN_PATH	video_detection/main.py	/^SAVE_TRAIN_PATH = ('.\/data\/train_x.npy', 'data\/train_y.npy')$/;"	v
SELF_TEST_A	arm/moveClassifier/MPU9250.h	47;"	d
SELF_TEST_A	arm/moveClassifier_bak/MPU9250.h	47;"	d
SELF_TEST_A	arm/sensor/MPU9250.h	47;"	d
SELF_TEST_X_ACCEL	arm/moveClassifier/MPU9250.h	43;"	d
SELF_TEST_X_ACCEL	arm/moveClassifier_bak/MPU9250.h	43;"	d
SELF_TEST_X_ACCEL	arm/sensor/MPU9250.h	43;"	d
SELF_TEST_X_GYRO	arm/moveClassifier/MPU9250.h	29;"	d
SELF_TEST_X_GYRO	arm/moveClassifier_bak/MPU9250.h	29;"	d
SELF_TEST_X_GYRO	arm/sensor/MPU9250.h	29;"	d
SELF_TEST_Y_ACCEL	arm/moveClassifier/MPU9250.h	44;"	d
SELF_TEST_Y_ACCEL	arm/moveClassifier_bak/MPU9250.h	44;"	d
SELF_TEST_Y_ACCEL	arm/sensor/MPU9250.h	44;"	d
SELF_TEST_Y_GYRO	arm/moveClassifier/MPU9250.h	30;"	d
SELF_TEST_Y_GYRO	arm/moveClassifier_bak/MPU9250.h	30;"	d
SELF_TEST_Y_GYRO	arm/sensor/MPU9250.h	30;"	d
SELF_TEST_Z_ACCEL	arm/moveClassifier/MPU9250.h	45;"	d
SELF_TEST_Z_ACCEL	arm/moveClassifier_bak/MPU9250.h	45;"	d
SELF_TEST_Z_ACCEL	arm/sensor/MPU9250.h	45;"	d
SELF_TEST_Z_GYRO	arm/moveClassifier/MPU9250.h	31;"	d
SELF_TEST_Z_GYRO	arm/moveClassifier_bak/MPU9250.h	31;"	d
SELF_TEST_Z_GYRO	arm/sensor/MPU9250.h	31;"	d
SIGNAL_PATH_RESET	arm/moveClassifier/MPU9250.h	135;"	d
SIGNAL_PATH_RESET	arm/moveClassifier_bak/MPU9250.h	135;"	d
SIGNAL_PATH_RESET	arm/sensor/MPU9250.h	135;"	d
SMPLRT_DIV	arm/moveClassifier/MPU9250.h	55;"	d
SMPLRT_DIV	arm/moveClassifier_bak/MPU9250.h	55;"	d
SMPLRT_DIV	arm/sensor/MPU9250.h	55;"	d
STEP_N	video_detection/main.py	/^STEP_N = 50$/;"	v
SelfTest	arm/moveClassifier/MPU9250.h	/^float SelfTest[6];$/;"	v
SelfTest	arm/moveClassifier_bak/MPU9250.h	/^float SelfTest[6];$/;"	v
SelfTest	arm/sensor/MPU9250.h	/^float SelfTest[6];$/;"	v
Sensor	gesture_detection/sensor/__init__.py	/^class Sensor:$/;"	c
SensorVisualizer	gesture_detection/visualizer/sensor_visualizer.py	/^class SensorVisualizer(BaseVisualizer):$/;"	c
SetInDTWMatrix	arm/moveClassifier_bak/dtw.h	/^    inline void SetInDTWMatrix(size_t x, size_t y, float val)$/;"	f	class:DTW::SimpleDTW
SimpleDTW	arm/moveClassifier_bak/dtw.cpp	/^SimpleDTW::SimpleDTW()$/;"	f	class:SimpleDTW
SimpleDTW	arm/moveClassifier_bak/dtw.cpp	/^SimpleDTW::SimpleDTW(float (*distance_fn)(std::vector<float> p1, std::vector<float> p2))$/;"	f	class:SimpleDTW
SimpleDTW	arm/moveClassifier_bak/dtw.cpp	/^SimpleDTW::SimpleDTW(size_t x_size, size_t y_size, float (*distance_fn)(std::vector<float> p1, std::vector<float> p2))$/;"	f	class:SimpleDTW
SimpleDTW	arm/moveClassifier_bak/dtw.h	/^class SimpleDTW$/;"	c	namespace:DTW
Speech	gesture_detection/speech/__init__.py	/^class Speech:$/;"	c
Symkl2d	gesture_detection/utils/loss.py	/^class Symkl2d(nn.Module):$/;"	c
TEMP_OUT_H	arm/moveClassifier/MPU9250.h	97;"	d
TEMP_OUT_H	arm/moveClassifier_bak/MPU9250.h	97;"	d
TEMP_OUT_H	arm/sensor/MPU9250.h	97;"	d
TEMP_OUT_L	arm/moveClassifier/MPU9250.h	98;"	d
TEMP_OUT_L	arm/moveClassifier_bak/MPU9250.h	98;"	d
TEMP_OUT_L	arm/sensor/MPU9250.h	98;"	d
TENSORBOARD_DIR	video_detection/main.py	/^TENSORBOARD_DIR = '.\/runs'$/;"	v
Timer	gesture_detection/utils/timer.py	/^class Timer():$/;"	c
TrainOptions	gesture_detection/options/train_options.py	/^class TrainOptions(BaseOptions):$/;"	c
USER_CTRL	arm/moveClassifier/MPU9250.h	137;"	d
USER_CTRL	arm/moveClassifier_bak/MPU9250.h	137;"	d
USER_CTRL	arm/sensor/MPU9250.h	137;"	d
VDTW	arm/moveClassifier/dtw.h	15;"	d
VDTW	arm/moveClassifier_bak/vectordtw.h	15;"	d
VDTW	arm/test/include/dtw.h	15;"	d
VDTW	arm/test/src/util/dtw.h	15;"	d
VOLCABULARY_PATH	video_detection/main.py	/^VOLCABULARY_PATH = '.\/vocab.txt'$/;"	v
VectorDTW	arm/moveClassifier_bak/vectordtw.h	/^    	VectorDTW(uint n, uint constraint) : mGamma(n, vector<float>(n, INF)), mN(n), mConstraint(constraint) { }$/;"	f	class:VectorDTW
VectorDTW	arm/moveClassifier_bak/vectordtw.h	/^class VectorDTW $/;"	c
Vocabulary	gesture_detection/utils/vocabulary/__init__.py	/^class Vocabulary:$/;"	c
Vocabulary	video_detection/util.py	/^class Vocabulary:$/;"	c
WHO_AM_I_AK8963	arm/moveClassifier/MPU9250.h	12;"	d
WHO_AM_I_AK8963	arm/moveClassifier_bak/MPU9250.h	12;"	d
WHO_AM_I_AK8963	arm/sensor/MPU9250.h	12;"	d
WHO_AM_I_MPU9250	arm/moveClassifier/MPU9250.h	148;"	d
WHO_AM_I_MPU9250	arm/moveClassifier_bak/MPU9250.h	148;"	d
WHO_AM_I_MPU9250	arm/sensor/MPU9250.h	148;"	d
WOM_THR	arm/moveClassifier/MPU9250.h	61;"	d
WOM_THR	arm/moveClassifier_bak/MPU9250.h	61;"	d
WOM_THR	arm/sensor/MPU9250.h	61;"	d
XA_OFFSET_H	arm/moveClassifier/MPU9250.h	149;"	d
XA_OFFSET_H	arm/moveClassifier_bak/MPU9250.h	149;"	d
XA_OFFSET_H	arm/sensor/MPU9250.h	149;"	d
XA_OFFSET_L	arm/moveClassifier/MPU9250.h	150;"	d
XA_OFFSET_L	arm/moveClassifier_bak/MPU9250.h	150;"	d
XA_OFFSET_L	arm/sensor/MPU9250.h	150;"	d
XG_OFFSET_H	arm/moveClassifier/MPU9250.h	49;"	d
XG_OFFSET_H	arm/moveClassifier_bak/MPU9250.h	49;"	d
XG_OFFSET_H	arm/sensor/MPU9250.h	49;"	d
XG_OFFSET_L	arm/moveClassifier/MPU9250.h	50;"	d
XG_OFFSET_L	arm/moveClassifier_bak/MPU9250.h	50;"	d
XG_OFFSET_L	arm/sensor/MPU9250.h	50;"	d
YA_OFFSET_H	arm/moveClassifier/MPU9250.h	151;"	d
YA_OFFSET_H	arm/moveClassifier_bak/MPU9250.h	151;"	d
YA_OFFSET_H	arm/sensor/MPU9250.h	151;"	d
YA_OFFSET_L	arm/moveClassifier/MPU9250.h	152;"	d
YA_OFFSET_L	arm/moveClassifier_bak/MPU9250.h	152;"	d
YA_OFFSET_L	arm/sensor/MPU9250.h	152;"	d
YG_OFFSET_H	arm/moveClassifier/MPU9250.h	51;"	d
YG_OFFSET_H	arm/moveClassifier_bak/MPU9250.h	51;"	d
YG_OFFSET_H	arm/sensor/MPU9250.h	51;"	d
YG_OFFSET_L	arm/moveClassifier/MPU9250.h	52;"	d
YG_OFFSET_L	arm/moveClassifier_bak/MPU9250.h	52;"	d
YG_OFFSET_L	arm/sensor/MPU9250.h	52;"	d
ZA_OFFSET_H	arm/moveClassifier/MPU9250.h	153;"	d
ZA_OFFSET_H	arm/moveClassifier_bak/MPU9250.h	153;"	d
ZA_OFFSET_H	arm/sensor/MPU9250.h	153;"	d
ZA_OFFSET_L	arm/moveClassifier/MPU9250.h	154;"	d
ZA_OFFSET_L	arm/moveClassifier_bak/MPU9250.h	154;"	d
ZA_OFFSET_L	arm/sensor/MPU9250.h	154;"	d
ZG_OFFSET_H	arm/moveClassifier/MPU9250.h	53;"	d
ZG_OFFSET_H	arm/moveClassifier_bak/MPU9250.h	53;"	d
ZG_OFFSET_H	arm/sensor/MPU9250.h	53;"	d
ZG_OFFSET_L	arm/moveClassifier/MPU9250.h	54;"	d
ZG_OFFSET_L	arm/moveClassifier_bak/MPU9250.h	54;"	d
ZG_OFFSET_L	arm/sensor/MPU9250.h	54;"	d
ZMOT_THR	arm/moveClassifier/MPU9250.h	64;"	d
ZMOT_THR	arm/moveClassifier_bak/MPU9250.h	64;"	d
ZMOT_THR	arm/sensor/MPU9250.h	64;"	d
ZRMOT_DUR	arm/moveClassifier/MPU9250.h	65;"	d
ZRMOT_DUR	arm/moveClassifier_bak/MPU9250.h	65;"	d
ZRMOT_DUR	arm/sensor/MPU9250.h	65;"	d
_DEFINE_CLASSIFIER_	arm/moveClassifier/moveClassifier.h	3;"	d
_DEFINE_CLASSIFIER_	arm/moveClassifier_bak/classifier.h	3;"	d
_DEFINE_CLASSIFIER_	arm/test/include/moveClassifier.h	3;"	d
_DEFINE_CLASSIFIER_	arm/test/src/moveClassifier/moveClassifier.h	3;"	d
_DEFINE_GESTURE_	arm/moveClassifier/gesture.h	3;"	d
_DEFINE_GESTURE_	arm/moveClassifier_bak/gesture.h	3;"	d
_DEFINE_GESTURE_	arm/test/include/gesture.h	3;"	d
_DEFINE_GESTURE_	arm/test/src/util/gesture.h	3;"	d
_DEFINE_POINT_	arm/moveClassifier/point.h	3;"	d
_DEFINE_POINT_	arm/moveClassifier_bak/point.h	3;"	d
_DEFINE_POINT_	arm/test/include/point.h	3;"	d
_DEFINE_POINT_	arm/test/src/util/point.h	3;"	d
__call__	gesture_detection/classifier/binary.py	/^    def __call__(self, data):$/;"	m	class:Classifier	file:
__call__	gesture_detection/recorder/__init__.py	/^    def __call__(self, data):$/;"	m	class:Recorder	file:
__call__	gesture_detection/speech/__init__.py	/^    def __call__(self, data):$/;"	m	class:Speech	file:
__call__	gesture_detection/utils/loss.py	/^    def __call__(self, input, target_is_real):$/;"	m	class:GANLoss	file:
__call__	gesture_detection/utils/timer.py	/^    def __call__(self, percent):$/;"	m	class:Timer	file:
__call__	gesture_detection/utils/utils.py	/^    def __call__(self, data):$/;"	m	class:Queue	file:
__call__	gesture_detection/visualizer/base_visualizer.py	/^    def __call__(self, name, epoch, data= []):$/;"	m	class:BaseVisualizer	file:
__call__	gesture_detection/visualizer/painter.py	/^    def __call__(self, data):$/;"	m	class:Painter	file:
__call__	gesture_detection/visualizer/sensor_visualizer.py	/^    def __call__(self, data):$/;"	m	class:SensorVisualizer	file:
__getitem__	gesture_detection/dataset/binary_dataset.py	/^    def __getitem__(self, index):$/;"	m	class:BinaryDataSet	file:
__getitem__	gesture_detection/dataset/concat_dataset.py	/^    def __getitem__(self, i):$/;"	m	class:ConcatDataset	file:
__getitem__	video_detection/util.py	/^    def __getitem__(self, i):$/;"	m	class:ImageDataset	file:
__init__	gesture_detection/classifier/DTW.py	/^    def __init__(self, threshold = 98, noOps = 'None'):$/;"	m	class:Classifier
__init__	gesture_detection/classifier/binary.py	/^    def __init__(self, threshold = 40, index = [3,4,5], nStep = 8):$/;"	m	class:Classifier
__init__	gesture_detection/dataset/base_dataset.py	/^    def __init__(self, opt):$/;"	m	class:BaseDataset
__init__	gesture_detection/dataset/binary_dataset.py	/^    def __init__(self, dataDir, split, nInput = 3):$/;"	m	class:BinaryDataSet
__init__	gesture_detection/dataset/concat_dataset.py	/^    def __init__(self, dataset):$/;"	m	class:ConcatDataset
__init__	gesture_detection/filter/__init__.py	/^    def __init__(self, dimState, dimObserve, covariance = 1, processNoise = 0.01, measureNoise = 0.01, dT = 0.1 ):$/;"	m	class:Filter
__init__	gesture_detection/models/base_model.py	/^    def __init__(self, opt):$/;"	m	class:BaseModel
__init__	gesture_detection/models/binary_model.py	/^    def __init__(self, opt):$/;"	m	class:BinaryModel
__init__	gesture_detection/models/network/__init__.py	/^    def __init__(self, opt):$/;"	m	class:Classifier
__init__	gesture_detection/models/network/__init__.py	/^    def __init__(self, sigma=0.1, is_relative_detach=True, device = 0):$/;"	m	class:GaussianNoise
__init__	gesture_detection/options/action_options.py	/^    def __init__(self):$/;"	m	class:ActionOptions
__init__	gesture_detection/options/base_options.py	/^    def __init__(self):$/;"	m	class:BaseOptions
__init__	gesture_detection/options/main_options.py	/^    def __init__(self):$/;"	m	class:MainOptions
__init__	gesture_detection/options/predict_options.py	/^    def __init__(self):$/;"	m	class:PredictOptions
__init__	gesture_detection/options/record_options.py	/^    def __init__(self):$/;"	m	class:RecorderOptions
__init__	gesture_detection/options/train_options.py	/^    def __init__(self):$/;"	m	class:TrainOptions
__init__	gesture_detection/recorder/__init__.py	/^    def __init__(self, opt):$/;"	m	class:Recorder
__init__	gesture_detection/sensor/__init__.py	/^    def __init__(self, n = 16, port = '\/dev\/tty0', freq = 57600):$/;"	m	class:Sensor
__init__	gesture_detection/speech/__init__.py	/^    def __init__(self):$/;"	m	class:Speech
__init__	gesture_detection/utils/accu_eval.py	/^    def __init__(self, epsilon = 1E-8):$/;"	m	class:AccuEval
__init__	gesture_detection/utils/loss.py	/^    def __init__(self, opt, size_average=False):$/;"	m	class:Distance
__init__	gesture_detection/utils/loss.py	/^    def __init__(self, opt, size_average=True):$/;"	m	class:CrossEntropyLoss2d
__init__	gesture_detection/utils/loss.py	/^    def __init__(self, use_lsgan=True, target_real_label=1.0, target_fake_label=0.0):$/;"	m	class:GANLoss
__init__	gesture_detection/utils/loss.py	/^    def __init__(self, weight=None, n_target_ch=21, size_average=True):$/;"	m	class:Symkl2d
__init__	gesture_detection/utils/loss.py	/^    def __init__(self, weight=None, size_average=True):$/;"	m	class:BalanceLoss2d
__init__	gesture_detection/utils/loss.py	/^    def __init__(self, weight=None, size_average=True):$/;"	m	class:Diff2d
__init__	gesture_detection/utils/loss.py	/^    def __init__(self, weight=None, size_average=True):$/;"	m	class:Entropy
__init__	gesture_detection/utils/timer.py	/^    def __init__(self):$/;"	m	class:Timer
__init__	gesture_detection/utils/utils.py	/^    def __init__(self, n, dim, device):$/;"	m	class:Queue
__init__	gesture_detection/utils/vocabulary/__init__.py	/^    def __init__(self):$/;"	m	class:Vocabulary
__init__	gesture_detection/visualizer/base_visualizer.py	/^    def __init__(self, stepSize, totalSize, logPath = None, displayWidth=1):$/;"	m	class:BaseVisualizer
__init__	gesture_detection/visualizer/model_visualizer.py	/^    def __init__(self, opt, dataset):$/;"	m	class:ModelVisualizer
__init__	gesture_detection/visualizer/painter.py	/^    def __init__(self, repr = ['Ax', 'Ay', 'Az', 'Gx', 'Gy', 'Gz', 'Mx', 'My', 'Mz', 'Q1', 'Q2', 'Q3', 'Q4', 'Y', 'P', 'R'], display= None, memorySize = 10, ylim = [-200, 200]):$/;"	m	class:Painter
__init__	gesture_detection/visualizer/progress_visualizer.py	/^    def __init__(self, opt, dataset):$/;"	m	class:ProgressVisualizer
__init__	gesture_detection/visualizer/sensor_visualizer.py	/^    def __init__(self, repr = ['Ax', 'Ay', 'Az', 'Gx', 'Gy', 'Gz', 'Mx', 'My', 'Mz', 'Q1', 'Q2', 'Q3', 'Q4', 'Y', 'P', 'R']):$/;"	m	class:SensorVisualizer
__init__	video_detection/util.py	/^    def __init__(self, image, label, batch_size, shuffle, max_len=10000 ):$/;"	m	class:ActionDataLoader
__init__	video_detection/util.py	/^    def __init__(self, image, label, step_n, batch_size, movie_len=3):$/;"	m	class:MovieDataLoader
__init__	video_detection/util.py	/^    def __init__(self, image, label= None, rotate = False, angle = 10):$/;"	m	class:ImageDataset
__init__	video_detection/util.py	/^    def __init__(self, input_dim, layer_n, label_dim, dropout = 0.5):$/;"	m	class:Movie_Classifier
__init__	video_detection/util.py	/^    def __init__(self, vocabulary_file = None):$/;"	m	class:Vocabulary
__init__	video_detection/util.py	/^    def __init__(self,input_dim, label_dim, dropout=0.5):$/;"	m	class:Image_Classifier
__init__	video_detection/util.py	/^    def __init__(self,vocabulary_file=None, tensorboard_dir= None):$/;"	m	class:Datamanager
__iter__	video_detection/util.py	/^    def __iter__(self):$/;"	m	class:ActionDataLoader	file:
__iter__	video_detection/util.py	/^    def __iter__(self):$/;"	m	class:MovieDataLoader	file:
__len__	gesture_detection/dataset/base_dataset.py	/^    def __len__(self):$/;"	m	class:BaseDataset	file:
__len__	gesture_detection/dataset/binary_dataset.py	/^    def __len__(self):$/;"	m	class:BinaryDataSet	file:
__len__	gesture_detection/dataset/concat_dataset.py	/^    def __len__(self):$/;"	m	class:ConcatDataset	file:
__len__	video_detection/util.py	/^    def __len__(self):$/;"	m	class:ActionDataLoader	file:
__len__	video_detection/util.py	/^    def __len__(self):$/;"	m	class:ImageDataset	file:
__len__	video_detection/util.py	/^    def __len__(self):$/;"	m	class:MovieDataLoader	file:
__next__	video_detection/util.py	/^    def __next__(self):$/;"	m	class:ActionDataLoader	file:
__next__	video_detection/util.py	/^    def __next__(self):$/;"	m	class:MovieDataLoader	file:
_action	arm/moveClassifier/gesture.h	/^    string _action;$/;"	m	class:Gesture
_action	arm/moveClassifier_bak/gesture.h	/^    string _action;$/;"	m	class:Gesture
_action	arm/test/include/gesture.h	/^    string _action;$/;"	m	class:Gesture
_action	arm/test/src/util/gesture.h	/^    string _action;$/;"	m	class:Gesture
_constraint	arm/moveClassifier/dtw.h	/^    float _constraint;$/;"	m	class:DTW
_constraint	arm/test/include/dtw.h	/^    float _constraint;$/;"	m	class:DTW
_constraint	arm/test/src/util/dtw.h	/^    float _constraint;$/;"	m	class:DTW
_data	arm/moveClassifier/binaryClassifier.h	/^    vector<vector<float> > _data;$/;"	m	class:BinaryClassifier
_data	arm/moveClassifier/gesture.h	/^    vector<Point> _data;$/;"	m	class:Gesture
_data	arm/moveClassifier/moveClassifier.h	/^    vector<Gesture> _data;$/;"	m	class:MoveClassifier
_data	arm/moveClassifier_bak/binaryClassifier.h	/^    vector<vector<float> > _data;$/;"	m	class:BinaryClassifier
_data	arm/moveClassifier_bak/classifier.h	/^    vector<Gesture> _data;$/;"	m	class:MoveClassifier
_data	arm/moveClassifier_bak/gesture.h	/^    vector<vector<float> > _data;$/;"	m	class:Gesture
_data	arm/test/include/binaryClassifier.h	/^    vector<vector<float> > _data;$/;"	m	class:BinaryClassifier
_data	arm/test/include/gesture.h	/^    vector<Point> _data;$/;"	m	class:Gesture
_data	arm/test/include/moveClassifier.h	/^    vector<Gesture> _data;$/;"	m	class:MoveClassifier
_data	arm/test/src/binaryClassifier/binaryClassifier.h	/^    vector<vector<float> > _data;$/;"	m	class:BinaryClassifier
_data	arm/test/src/moveClassifier/moveClassifier.h	/^    vector<Gesture> _data;$/;"	m	class:MoveClassifier
_data	arm/test/src/util/gesture.h	/^    vector<Point> _data;$/;"	m	class:Gesture
_dtwEval	arm/moveClassifier_bak/classifier.h	/^    SimpleDTW _dtwEval;$/;"	m	class:MoveClassifier
_gamma	arm/moveClassifier/dtw.h	/^    vector<vector<float> > _gamma;$/;"	m	class:DTW
_gamma	arm/test/include/dtw.h	/^    vector<vector<float> > _gamma;$/;"	m	class:DTW
_gamma	arm/test/src/util/dtw.h	/^    vector<vector<float> > _gamma;$/;"	m	class:DTW
_h	arm/moveClassifier/dtw.h	/^    int _h, _w;$/;"	m	class:DTW
_h	arm/test/include/dtw.h	/^    int _h, _w;$/;"	m	class:DTW
_h	arm/test/src/util/dtw.h	/^    int _h, _w;$/;"	m	class:DTW
_index	arm/moveClassifier/binaryClassifier.h	/^    vector<int>_index;$/;"	m	class:BinaryClassifier
_index	arm/moveClassifier_bak/binaryClassifier.h	/^    vector<int>_index;$/;"	m	class:BinaryClassifier
_index	arm/test/include/binaryClassifier.h	/^    vector<int>_index;$/;"	m	class:BinaryClassifier
_index	arm/test/src/binaryClassifier/binaryClassifier.h	/^    vector<int>_index;$/;"	m	class:BinaryClassifier
_init	gesture_detection/visualizer/painter.py	/^    def _init(self):$/;"	m	class:Painter
_nStep	arm/moveClassifier/binaryClassifier.h	/^    int _nStep;$/;"	m	class:BinaryClassifier
_nStep	arm/moveClassifier_bak/binaryClassifier.h	/^    int _nStep;$/;"	m	class:BinaryClassifier
_nStep	arm/test/include/binaryClassifier.h	/^    int _nStep;$/;"	m	class:BinaryClassifier
_nStep	arm/test/src/binaryClassifier/binaryClassifier.h	/^    int _nStep;$/;"	m	class:BinaryClassifier
_plot	gesture_detection/visualizer/painter.py	/^    def _plot(self):$/;"	m	class:Painter
_read	gesture_detection/sensor/__init__.py	/^    def _read(self):$/;"	m	class:Sensor
_speech	gesture_detection/speech/__init__.py	/^    def _speech(self, data):$/;"	m	class:Speech
_threshold	arm/moveClassifier/binaryClassifier.h	/^    float _threshold;$/;"	m	class:BinaryClassifier
_threshold	arm/moveClassifier/moveClassifier.h	/^    float _threshold;$/;"	m	class:MoveClassifier
_threshold	arm/moveClassifier_bak/binaryClassifier.h	/^    float _threshold;$/;"	m	class:BinaryClassifier
_threshold	arm/moveClassifier_bak/classifier.h	/^    float _threshold;$/;"	m	class:MoveClassifier
_threshold	arm/test/include/binaryClassifier.h	/^    float _threshold;$/;"	m	class:BinaryClassifier
_threshold	arm/test/include/moveClassifier.h	/^    float _threshold;$/;"	m	class:MoveClassifier
_threshold	arm/test/src/binaryClassifier/binaryClassifier.h	/^    float _threshold;$/;"	m	class:BinaryClassifier
_threshold	arm/test/src/moveClassifier/moveClassifier.h	/^    float _threshold;$/;"	m	class:MoveClassifier
_update	gesture_detection/visualizer/painter.py	/^    def _update(self, index): $/;"	m	class:Painter
_w	arm/moveClassifier/dtw.h	/^    int _h, _w;$/;"	m	class:DTW
_w	arm/test/include/dtw.h	/^    int _h, _w;$/;"	m	class:DTW
_w	arm/test/src/util/dtw.h	/^    int _h, _w;$/;"	m	class:DTW
aRes	arm/moveClassifier/MPU9250.h	/^float aRes, gRes, mRes;      \/\/ scale resolutions per LSB for the sensors$/;"	v
aRes	arm/moveClassifier_bak/MPU9250.h	/^float aRes, gRes, mRes;      \/\/ scale resolutions per LSB for the sensors$/;"	v
aRes	arm/sensor/MPU9250.h	/^float aRes, gRes, mRes;      \/\/ scale resolutions per LSB for the sensors$/;"	v
accelBias	arm/moveClassifier/MPU9250.h	/^float gyroBias[3] = {0, 0, 0}, accelBias[3] = {0, 0, 0}; \/\/ Bias corrections for gyro and accelerometer$/;"	v
accelBias	arm/moveClassifier_bak/MPU9250.h	/^float gyroBias[3] = {0, 0, 0}, accelBias[3] = {0, 0, 0}; \/\/ Bias corrections for gyro and accelerometer$/;"	v
accelBias	arm/sensor/MPU9250.h	/^float gyroBias[3] = {0, 0, 0}, accelBias[3] = {0, 0, 0}; \/\/ Bias corrections for gyro and accelerometer$/;"	v
accelCount	arm/moveClassifier/MPU9250.h	/^int16_t accelCount[3];  \/\/ Stores the 16-bit signed accelerometer sensor output$/;"	v
accelCount	arm/moveClassifier_bak/MPU9250.h	/^int16_t accelCount[3];  \/\/ Stores the 16-bit signed accelerometer sensor output$/;"	v
accelCount	arm/sensor/MPU9250.h	/^int16_t accelCount[3];  \/\/ Stores the 16-bit signed accelerometer sensor output$/;"	v
accu_record	video_detection/main.py	/^        accu_record= record[1]$/;"	v
accu_record	video_detection/main.py	/^accu_record=0$/;"	v
action	arm/moveClassifier/gesture.cpp	/^string& Gesture::action(){$/;"	f	class:Gesture
action	arm/moveClassifier_bak/gesture.cpp	/^string Gesture::action(){$/;"	f	class:Gesture
action	arm/test/src/util/gesture.cpp	/^string& Gesture::action(){$/;"	f	class:Gesture
action	gesture_detection/dump.py	/^action = [line.strip() for line in open(".\/utils\/vocabulary\/record.txt", 'r')]$/;"	v
add	gesture_detection/utils/vocabulary/__init__.py	/^    def add(self, word):$/;"	m	class:Vocabulary
addWord	video_detection/util.py	/^    def addWord(self, word):$/;"	m	class:Vocabulary
asMinutes	gesture_detection/utils/timer.py	/^    def asMinutes(self, s):$/;"	m	class:Timer
asMinutes	video_detection/util.py	/^    def asMinutes(self,s):$/;"	m	class:Datamanager
ax	arm/moveClassifier/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
ax	arm/moveClassifier_bak/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
ax	arm/sensor/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
ay	arm/moveClassifier/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
ay	arm/moveClassifier_bak/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
ay	arm/sensor/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
az	arm/moveClassifier/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
az	arm/moveClassifier_bak/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
az	arm/sensor/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
backward_classifier	gesture_detection/models/binary_model.py	/^    def backward_classifier(self, retain_graph = False):$/;"	m	class:BinaryModel
beta	arm/moveClassifier/MPU9250.h	/^float beta = sqrt(3.0f \/ 4.0f) * GyroMeasError;  \/\/ compute beta$/;"	v
beta	arm/moveClassifier_bak/MPU9250.h	/^float beta = sqrt(3.0f \/ 4.0f) * GyroMeasError;  \/\/ compute beta$/;"	v
beta	arm/sensor/MPU9250.h	/^float beta = sqrt(3.0f \/ 4.0f) * GyroMeasError;  \/\/ compute beta$/;"	v
buffer	arm/moveClassifier/sensor.h	/^char buffer[14];$/;"	v
buffer	arm/moveClassifier_bak/sensor.h	/^char buffer[14];$/;"	v
buffer	arm/sensor/sensor.h	/^char buffer[14];$/;"	v
buffer	gesture_detection/mbed.cpp	/^char buffer[14];$/;"	v
buffer	gesture_detection/mbed/main.cpp	/^char buffer[14];$/;"	v
c	gesture_detection/classifier/binary.py	/^    c = Classifier()$/;"	v	class:Classifier
c	gesture_detection/utils/accu_eval.py	/^    c = 20$/;"	v	class:AccuEval
calibrateMPU9250	arm/moveClassifier/MPU9250.h	/^void calibrateMPU9250(float * dest1, float * dest2)$/;"	f	class:MPU9250
calibrateMPU9250	arm/moveClassifier_bak/MPU9250.h	/^void calibrateMPU9250(float * dest1, float * dest2)$/;"	f	class:MPU9250
calibrateMPU9250	arm/sensor/MPU9250.h	/^void calibrateMPU9250(float * dest1, float * dest2)$/;"	f	class:MPU9250
classifier	gesture_detection/recorder_action.py	/^classifier = ClassifierBinary(opt.threshold, opt.index, opt.nStep)$/;"	v
classifierBinary	gesture_detection/predict.py	/^classifierBinary = ClassifierBinary(opt.binaryThreshold, opt.index, opt.nStep)$/;"	v
classifierDtw	gesture_detection/predict.py	/^classifierDtw = ClassifierDtw(opt.actionThreshold)$/;"	v
connect_MPU9250	arm/moveClassifier/sensor.h	/^void connect_MPU9250(Serial& pc) {$/;"	f
connect_MPU9250	arm/moveClassifier_bak/sensor.h	/^void connect_MPU9250(Serial& pc) {$/;"	f
connect_MPU9250	arm/sensor/sensor.h	/^void connect_MPU9250(Serial& pc) {$/;"	f
construct_actionDir	gesture_detection/options/base_options.py	/^    def construct_actionDir(self):$/;"	m	class:BaseOptions
construct_checkpoints	gesture_detection/options/base_options.py	/^    def construct_checkpoints(self,creatDir = True):$/;"	m	class:BaseOptions
construct_device	gesture_detection/options/base_options.py	/^    def construct_device(self):$/;"	m	class:BaseOptions
construct_input	gesture_detection/options/base_options.py	/^    def construct_input(self):$/;"	m	class:BaseOptions
construct_message	gesture_detection/options/base_options.py	/^    def construct_message(self):$/;"	m	class:BaseOptions
construct_splitDir	gesture_detection/options/base_options.py	/^    def construct_splitDir(self):$/;"	m	class:BaseOptions
convert	gesture_detection/utils/utils.py	/^def convert(data, n):$/;"	f
count	arm/moveClassifier/MPU9250.h	/^int count = 0;  \/\/ used to control display output rate$/;"	v
count	arm/moveClassifier_bak/MPU9250.h	/^int count = 0;  \/\/ used to control display output rate$/;"	v
count	arm/sensor/MPU9250.h	/^int count = 0;  \/\/ used to control display output rate$/;"	v
count_parameters	video_detection/util.py	/^    def count_parameters(self,model):$/;"	m	class:Datamanager
createDataset	gesture_detection/dataset/__init__.py	/^def createDataset(opt, split, nInput):$/;"	f
createModel	gesture_detection/models/__init__.py	/^def createModel(opt):$/;"	f
createScheduler	gesture_detection/models/base_model.py	/^def createScheduler(optimizer, opt):$/;"	f
current_accus	gesture_detection/models/base_model.py	/^    def current_accus(self):$/;"	m	class:BaseModel
current_losses	gesture_detection/models/base_model.py	/^    def current_losses(self):$/;"	m	class:BaseModel
data	arm/moveClassifier/gesture.cpp	/^vector<Point>& Gesture::data(){$/;"	f	class:Gesture
data	arm/moveClassifier_bak/gesture.cpp	/^vector<vector<float> > Gesture::data(){$/;"	f	class:Gesture
data	arm/test/src/util/gesture.cpp	/^vector<Point>& Gesture::data(){$/;"	f	class:Gesture
data_	arm/moveClassifier_bak/dtw.h	/^    std::vector<float> data_;$/;"	m	class:DTW::SimpleDTW
delt_t	arm/moveClassifier/MPU9250.h	/^int delt_t = 0; \/\/ used to control display output rate$/;"	v
delt_t	arm/moveClassifier_bak/MPU9250.h	/^int delt_t = 0; \/\/ used to control display output rate$/;"	v
delt_t	arm/sensor/MPU9250.h	/^int delt_t = 0; \/\/ used to control display output rate$/;"	v
deltat	arm/moveClassifier/MPU9250.h	/^float deltat = 0.0f;                             \/\/ integration interval for both filter schemes$/;"	v
deltat	arm/moveClassifier_bak/MPU9250.h	/^float deltat = 0.0f;                             \/\/ integration interval for both filter schemes$/;"	v
deltat	arm/sensor/MPU9250.h	/^float deltat = 0.0f;                             \/\/ integration interval for both filter schemes$/;"	v
dir_path	gesture_detection/test.py	/^dir_path = os.path.dirname(os.path.realpath(__file__))$/;"	v
displayImage	gesture_detection/visualizer/base_visualizer.py	/^    def displayImage(self, data, step, name = 'Image'):$/;"	m	class:BaseVisualizer
displayScalor	gesture_detection/visualizer/base_visualizer.py	/^    def displayScalor(self, data, step):$/;"	m	class:BaseVisualizer
distance_fn_	arm/moveClassifier_bak/dtw.h	/^    float (*distance_fn_)(std::vector<float> p1, std::vector<float> p2);$/;"	m	class:DTW::SimpleDTW
dm	video_detection/main.py	/^dm = Datamanager(vocabulary_file = VOLCABULARY_PATH, tensorboard_dir = TENSORBOARD_DIR)$/;"	v
dump	gesture_detection/dump.py	/^def dump(act):$/;"	f
dump_action	gesture_detection/recorder/__init__.py	/^    def dump_action(self):$/;"	m	class:Recorder
dump_action_id	gesture_detection/recorder/__init__.py	/^    def dump_action_id(self, index):$/;"	m	class:Recorder
dump_split	gesture_detection/recorder/__init__.py	/^    def dump_split(self):$/;"	m	class:Recorder
eInt	arm/moveClassifier/MPU9250.h	/^float eInt[3] = {0.0f, 0.0f, 0.0f};              \/\/ vector to hold integral error for Mahony method$/;"	v
eInt	arm/moveClassifier_bak/MPU9250.h	/^float eInt[3] = {0.0f, 0.0f, 0.0f};              \/\/ vector to hold integral error for Mahony method$/;"	v
eInt	arm/sensor/MPU9250.h	/^float eInt[3] = {0.0f, 0.0f, 0.0f};              \/\/ vector to hold integral error for Mahony method$/;"	v
end	gesture_detection/visualizer/base_visualizer.py	/^    def end(self, name, epoch, data=[]): $/;"	m	class:BaseVisualizer
euclid_distance	arm/moveClassifier/point.h	/^	float euclid_distance(const Point &p) $/;"	f	class:Point
euclid_distance	arm/moveClassifier_bak/point.h	/^	float euclid_distance(const Point &p) $/;"	f	class:Point
euclid_distance	arm/test/include/point.h	/^	float euclid_distance(const Point &p) $/;"	f	class:Point
euclid_distance	arm/test/src/util/point.h	/^	float euclid_distance(const Point &p) $/;"	f	class:Point
euclidean_distance	arm/moveClassifier_bak/classifier.cpp	/^float MoveClassifier::euclidean_distance(vector<float> P1, vector<float> P2) {$/;"	f	class:MoveClassifier
eval	gesture_detection/models/base_model.py	/^    def eval(self):$/;"	m	class:BaseModel
evaluateDtwCost	arm/moveClassifier_bak/classifier.cpp	/^float MoveClassifier::evaluateDtwCost(vector<vector<float> > s1, vector<vector<float> > s2) {$/;"	f	class:MoveClassifier
f	gesture_detection/filter/__init__.py	/^    f = Filter( 16, 16)$/;"	v
fastdynamic	arm/moveClassifier/dtw.cpp	/^float DTW::fastdynamic(vector<Point> &lhs, vector<Point> &rhs){$/;"	f	class:DTW
fastdynamic	arm/moveClassifier_bak/vectordtw.h	/^	inline float fastdynamic(vector<Point> &v, vector<Point> &w) $/;"	f	class:VectorDTW
fastdynamic	arm/test/src/util/dtw.cpp	/^float DTW::fastdynamic(vector<Point> &lhs, vector<Point> &rhs){$/;"	f	class:DTW
filter	gesture_detection/action.py	/^filter = Filter(opt.n, opt.n)$/;"	v
filter	gesture_detection/main.py	/^filter = Filter(opt.n, opt.n)$/;"	v
filter	gesture_detection/predict.py	/^filter = Filter(opt.n, opt.n)$/;"	v
filter	gesture_detection/recorder.py	/^filter = Filter(opt.n, opt.n)$/;"	v
filter	gesture_detection/recorder_action.py	/^filter = Filter(opt.n, opt.n)$/;"	v
firstUpdate	arm/moveClassifier/MPU9250.h	/^int lastUpdate = 0, firstUpdate = 0, Now = 0;    \/\/ used to calculate integration interval                               \/\/ used to calculate integration interval$/;"	v
firstUpdate	arm/moveClassifier_bak/MPU9250.h	/^int lastUpdate = 0, firstUpdate = 0, Now = 0;    \/\/ used to calculate integration interval                               \/\/ used to calculate integration interval$/;"	v
firstUpdate	arm/sensor/MPU9250.h	/^int lastUpdate = 0, firstUpdate = 0, Now = 0;    \/\/ used to calculate integration interval                               \/\/ used to calculate integration interval$/;"	v
flush	gesture_detection/sensor/__init__.py	/^    def flush(self):$/;"	m	class:Sensor
forward	gesture_detection/models/base_model.py	/^    def forward(self):$/;"	m	class:BaseModel
forward	gesture_detection/models/binary_model.py	/^    def forward(self):$/;"	m	class:BinaryModel
forward	gesture_detection/models/network/__init__.py	/^    def forward(self, x):$/;"	m	class:Classifier
forward	gesture_detection/models/network/__init__.py	/^    def forward(self, x):$/;"	m	class:GaussianNoise
forward	gesture_detection/utils/loss.py	/^    def forward(self, inputs, targets):$/;"	m	class:CrossEntropyLoss2d
forward	gesture_detection/utils/loss.py	/^    def forward(self, inputs, targets):$/;"	m	class:Distance
forward	gesture_detection/utils/loss.py	/^    def forward(self, inputs1):$/;"	m	class:Entropy
forward	gesture_detection/utils/loss.py	/^    def forward(self, inputs1, inputs2):$/;"	m	class:BalanceLoss2d
forward	gesture_detection/utils/loss.py	/^    def forward(self, inputs1, inputs2):$/;"	m	class:Diff2d
forward	gesture_detection/utils/loss.py	/^    def forward(self, inputs1, inputs2):$/;"	m	class:Symkl2d
forward	video_detection/util.py	/^    def forward(self, x):$/;"	m	class:Image_Classifier
forward	video_detection/util.py	/^    def forward(self, x, i):$/;"	m	class:Movie_Classifier
gRes	arm/moveClassifier/MPU9250.h	/^float aRes, gRes, mRes;      \/\/ scale resolutions per LSB for the sensors$/;"	v
gRes	arm/moveClassifier_bak/MPU9250.h	/^float aRes, gRes, mRes;      \/\/ scale resolutions per LSB for the sensors$/;"	v
gRes	arm/sensor/MPU9250.h	/^float aRes, gRes, mRes;      \/\/ scale resolutions per LSB for the sensors$/;"	v
gather_options	gesture_detection/options/base_options.py	/^    def gather_options(self):$/;"	m	class:BaseOptions
getAres	arm/moveClassifier/MPU9250.h	/^void getAres() {$/;"	f	class:MPU9250
getAres	arm/moveClassifier_bak/MPU9250.h	/^void getAres() {$/;"	f	class:MPU9250
getAres	arm/sensor/MPU9250.h	/^void getAres() {$/;"	f	class:MPU9250
getGres	arm/moveClassifier/MPU9250.h	/^void getGres() {$/;"	f	class:MPU9250
getGres	arm/moveClassifier_bak/MPU9250.h	/^void getGres() {$/;"	f	class:MPU9250
getGres	arm/sensor/MPU9250.h	/^void getGres() {$/;"	f	class:MPU9250
getMres	arm/moveClassifier/MPU9250.h	/^void getMres() {$/;"	f	class:MPU9250
getMres	arm/moveClassifier_bak/MPU9250.h	/^void getMres() {$/;"	f	class:MPU9250
getMres	arm/sensor/MPU9250.h	/^void getMres() {$/;"	f	class:MPU9250
getOptimizer	gesture_detection/models/base_model.py	/^def getOptimizer(model_parameters, opt, lr, beta1= None, momentum= None, weight_decay= None):$/;"	f
get_data_image	video_detection/util.py	/^    def get_data_image(self,file_path,tag_path,batch_size,shuffle=True, downsample_factor=12, image_size=(224,224),save_path=None):$/;"	m	class:Datamanager
get_data_movie	video_detection/util.py	/^    def get_data_movie(self,file_path,tag_path,batch_size,step_n, downsample_factor=12, image_size=(224,224),save_path=None):$/;"	m	class:Datamanager
get_target_tensor	gesture_detection/utils/loss.py	/^    def get_target_tensor(self, input, target_is_real):$/;"	m	class:GANLoss
get_test_data_image	video_detection/util.py	/^    def get_test_data_image(self,file_path,batch_size,shuffle=True, downsample_factor=12, image_size=(224,224),save_path=None):$/;"	m	class:Datamanager
get_test_data_movie	video_detection/util.py	/^    def get_test_data_movie(self,file_path,batch_size,step_n, downsample_factor=12, image_size=(224,224),save_path=None):$/;"	m	class:Datamanager
gx	arm/moveClassifier/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
gx	arm/moveClassifier_bak/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
gx	arm/sensor/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
gy	arm/moveClassifier/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
gy	arm/moveClassifier_bak/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
gy	arm/sensor/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
gyroBias	arm/moveClassifier/MPU9250.h	/^float gyroBias[3] = {0, 0, 0}, accelBias[3] = {0, 0, 0}; \/\/ Bias corrections for gyro and accelerometer$/;"	v
gyroBias	arm/moveClassifier_bak/MPU9250.h	/^float gyroBias[3] = {0, 0, 0}, accelBias[3] = {0, 0, 0}; \/\/ Bias corrections for gyro and accelerometer$/;"	v
gyroBias	arm/sensor/MPU9250.h	/^float gyroBias[3] = {0, 0, 0}, accelBias[3] = {0, 0, 0}; \/\/ Bias corrections for gyro and accelerometer$/;"	v
gyroCount	arm/moveClassifier/MPU9250.h	/^int16_t gyroCount[3];   \/\/ Stores the 16-bit signed gyro sensor output$/;"	v
gyroCount	arm/moveClassifier_bak/MPU9250.h	/^int16_t gyroCount[3];   \/\/ Stores the 16-bit signed gyro sensor output$/;"	v
gyroCount	arm/sensor/MPU9250.h	/^int16_t gyroCount[3];   \/\/ Stores the 16-bit signed gyro sensor output$/;"	v
gz	arm/moveClassifier/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
gz	arm/moveClassifier_bak/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
gz	arm/sensor/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
hidden_layer	video_detection/util.py	/^    def hidden_layer(self,n):$/;"	m	class:Movie_Classifier
import_class_by_name	gesture_detection/models/__init__.py	/^def import_class_by_name(modelName, className, classType = BaseModel):$/;"	f
initAK8963	arm/moveClassifier/MPU9250.h	/^  void initAK8963(float * destination)$/;"	f	class:MPU9250
initAK8963	arm/moveClassifier_bak/MPU9250.h	/^  void initAK8963(float * destination)$/;"	f	class:MPU9250
initAK8963	arm/sensor/MPU9250.h	/^  void initAK8963(float * destination)$/;"	f	class:MPU9250
initHidden	video_detection/util.py	/^    def initHidden(self, hidden_size):$/;"	m	class:Movie_Classifier
initMPU9250	arm/moveClassifier/MPU9250.h	/^void initMPU9250()$/;"	f	class:MPU9250
initMPU9250	arm/moveClassifier_bak/MPU9250.h	/^void initMPU9250()$/;"	f	class:MPU9250
initMPU9250	arm/sensor/MPU9250.h	/^void initMPU9250()$/;"	f	class:MPU9250
initNet	gesture_detection/models/base_model.py	/^    def initNet(self, net):$/;"	m	class:BaseModel
initialize	gesture_detection/options/action_options.py	/^    def initialize(self, parser):$/;"	m	class:ActionOptions
initialize	gesture_detection/options/base_options.py	/^    def initialize(self, parser):$/;"	m	class:BaseOptions
initialize	gesture_detection/options/main_options.py	/^    def initialize(self, parser):$/;"	m	class:MainOptions
initialize	gesture_detection/options/predict_options.py	/^    def initialize(self, parser):$/;"	m	class:PredictOptions
initialize	gesture_detection/options/record_options.py	/^    def initialize(self, parser):$/;"	m	class:RecorderOptions
initialize	gesture_detection/options/train_options.py	/^    def initialize(self, parser):$/;"	m	class:TrainOptions
initialize_bak	gesture_detection/options/base_options.py	/^    def initialize_bak(self, parser):$/;"	m	class:BaseOptions
initialized_	arm/moveClassifier_bak/dtw.h	/^    bool initialized_;$/;"	m	class:DTW::SimpleDTW
intPin	arm/moveClassifier/MPU9250.h	/^int intPin = 12;  \/\/ These can be changed, 2 and 3 are the Arduinos ext int pins$/;"	v
intPin	arm/moveClassifier_bak/MPU9250.h	/^int intPin = 12;  \/\/ These can be changed, 2 and 3 are the Arduinos ext int pins$/;"	v
intPin	arm/sensor/MPU9250.h	/^int intPin = 12;  \/\/ These can be changed, 2 and 3 are the Arduinos ext int pins$/;"	v
l1_distance	arm/moveClassifier/point.h	/^	float l1_distance(const Point &p) $/;"	f	class:Point
l1_distance	arm/moveClassifier_bak/point.h	/^	float l1_distance(const Point &p) $/;"	f	class:Point
l1_distance	arm/test/include/point.h	/^	float l1_distance(const Point &p) $/;"	f	class:Point
l1_distance	arm/test/src/util/point.h	/^	float l1_distance(const Point &p) $/;"	f	class:Point
label	gesture_detection/recorder/__init__.py	/^    def label(self, data):$/;"	m	class:Recorder
lambda_rule	gesture_detection/models/base_model.py	/^        def lambda_rule(epoch):$/;"	f	function:createScheduler
lastUpdate	arm/moveClassifier/MPU9250.h	/^int lastUpdate = 0, firstUpdate = 0, Now = 0;    \/\/ used to calculate integration interval                               \/\/ used to calculate integration interval$/;"	v
lastUpdate	arm/moveClassifier_bak/MPU9250.h	/^int lastUpdate = 0, firstUpdate = 0, Now = 0;    \/\/ used to calculate integration interval                               \/\/ used to calculate integration interval$/;"	v
lastUpdate	arm/sensor/MPU9250.h	/^int lastUpdate = 0, firstUpdate = 0, Now = 0;    \/\/ used to calculate integration interval                               \/\/ used to calculate integration interval$/;"	v
length	gesture_detection/utils/accu_eval.py	/^    length = 100$/;"	v	class:AccuEval
load	gesture_detection/utils/vocabulary/__init__.py	/^    def load(self):$/;"	m	class:Vocabulary
load	video_detection/util.py	/^    def load(self, path):$/;"	m	class:Vocabulary
load_networks	gesture_detection/models/base_model.py	/^    def load_networks(self, nEpoch):$/;"	m	class:BaseModel
load_options	gesture_detection/options/base_options.py	/^    def load_options(self, path):$/;"	m	class:BaseOptions
load_pretrained	gesture_detection/models/base_model.py	/^    def load_pretrained(self):$/;"	m	class:BaseModel
mConstraint	arm/moveClassifier_bak/vectordtw.h	/^	int mN, mConstraint;$/;"	m	class:VectorDTW
mGamma	arm/moveClassifier_bak/vectordtw.h	/^	vector<vector<float> > mGamma;$/;"	m	class:VectorDTW
mN	arm/moveClassifier_bak/vectordtw.h	/^	int mN, mConstraint;$/;"	m	class:VectorDTW
mRes	arm/moveClassifier/MPU9250.h	/^float aRes, gRes, mRes;      \/\/ scale resolutions per LSB for the sensors$/;"	v
mRes	arm/moveClassifier_bak/MPU9250.h	/^float aRes, gRes, mRes;      \/\/ scale resolutions per LSB for the sensors$/;"	v
mRes	arm/sensor/MPU9250.h	/^float aRes, gRes, mRes;      \/\/ scale resolutions per LSB for the sensors$/;"	v
magCalibration	arm/moveClassifier/MPU9250.h	/^float magCalibration[3] = {0, 0, 0}, magbias[3] = {0, 0, 0};  \/\/ Factory mag calibration and mag bias$/;"	v
magCalibration	arm/moveClassifier_bak/MPU9250.h	/^float magCalibration[3] = {0, 0, 0}, magbias[3] = {0, 0, 0};  \/\/ Factory mag calibration and mag bias$/;"	v
magCalibration	arm/sensor/MPU9250.h	/^float magCalibration[3] = {0, 0, 0}, magbias[3] = {0, 0, 0};  \/\/ Factory mag calibration and mag bias$/;"	v
magCount	arm/moveClassifier/MPU9250.h	/^int16_t magCount[3];    \/\/ Stores the 16-bit signed magnetometer sensor output$/;"	v
magCount	arm/moveClassifier_bak/MPU9250.h	/^int16_t magCount[3];    \/\/ Stores the 16-bit signed magnetometer sensor output$/;"	v
magCount	arm/sensor/MPU9250.h	/^int16_t magCount[3];    \/\/ Stores the 16-bit signed magnetometer sensor output$/;"	v
magbias	arm/moveClassifier/MPU9250.h	/^float magCalibration[3] = {0, 0, 0}, magbias[3] = {0, 0, 0};  \/\/ Factory mag calibration and mag bias$/;"	v
magbias	arm/moveClassifier_bak/MPU9250.h	/^float magCalibration[3] = {0, 0, 0}, magbias[3] = {0, 0, 0};  \/\/ Factory mag calibration and mag bias$/;"	v
magbias	arm/sensor/MPU9250.h	/^float magCalibration[3] = {0, 0, 0}, magbias[3] = {0, 0, 0};  \/\/ Factory mag calibration and mag bias$/;"	v
main	arm/moveClassifier/main.cpp	/^int main() {$/;"	f
main	arm/moveClassifier_bak/main.cpp	/^int main() {$/;"	f
main	arm/sensor/main.cpp	/^int main() {$/;"	f
main	arm/test/src/main/binaryClassifier.cpp	/^int main()$/;"	f
main	arm/test/src/main/dtw.cpp	/^int main()$/;"	f
main	arm/test/src/main/moveClassifier.cpp	/^int main(int argc, char *argv[]){$/;"	f
main	gesture_detection/action.py	/^def main():$/;"	f
main	gesture_detection/main.py	/^def main():$/;"	f
main	gesture_detection/mbed.cpp	/^int main() {$/;"	f
main	gesture_detection/mbed/main.cpp	/^int main() {$/;"	f
main	gesture_detection/predict.py	/^def main():$/;"	f
main	gesture_detection/recorder.py	/^def main():$/;"	f
main	gesture_detection/recorder_action.py	/^def main():$/;"	f
metric	gesture_detection/utils/accu_eval.py	/^    def metric(self):$/;"	m	class:AccuEval
min	arm/moveClassifier_bak/vectordtw.h	/^   	static inline float min (float x, float y ) { return x < y ? x : y; }$/;"	f	class:VectorDTW
model	gesture_detection/train.py	/^model = createModel(opt)$/;"	v
model	video_detection/main.py	/^model= Movie_Classifier(IMAGE_SIZE, layer_n  = LAYER_N, label_dim = dm.voc.n_words, dropout = DROPOUT).cuda()$/;"	v
mpu9250	arm/moveClassifier/sensor.h	/^MPU9250 mpu9250;$/;"	v
mpu9250	arm/moveClassifier_bak/sensor.h	/^MPU9250 mpu9250;$/;"	v
mpu9250	arm/sensor/sensor.h	/^MPU9250 mpu9250;$/;"	v
mpu9250	gesture_detection/mbed.cpp	/^MPU9250 mpu9250;$/;"	v
mpu9250	gesture_detection/mbed/main.cpp	/^MPU9250 mpu9250;$/;"	v
mx	arm/moveClassifier/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
mx	arm/moveClassifier_bak/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
mx	arm/sensor/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
my	arm/moveClassifier/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
my	arm/moveClassifier_bak/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
my	arm/sensor/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
mz	arm/moveClassifier/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
mz	arm/moveClassifier_bak/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
mz	arm/sensor/MPU9250.h	/^float ax, ay, az, gx, gy, gz, mx, my, mz; \/\/ variables to hold latest sensor data values $/;"	v
n	gesture_detection/utils/accu_eval.py	/^    n = 1000000$/;"	v	class:AccuEval
nData	arm/moveClassifier/gesture.cpp	2;"	d	file:
nData	arm/moveClassifier_bak/gesture.cpp	2;"	d	file:
nData	arm/test/src/util/gesture.cpp	2;"	d	file:
name	gesture_detection/dataset/base_dataset.py	/^    def name(self):$/;"	m	class:BaseDataset
name	gesture_detection/dataset/binary_dataset.py	/^    def name(self):$/;"	m	class:BinaryDataSet
name	gesture_detection/dataset/concat_dataset.py	/^    def name(self):$/;"	m	class:ConcatDataset
name	gesture_detection/models/base_model.py	/^    def name(self):$/;"	m	class:BaseModel
name	gesture_detection/models/binary_model.py	/^    def name(self):$/;"	m	class:BinaryModel
norm	arm/moveClassifier/binaryClassifier.cpp	/^float BinaryClassifier::norm(vector<float>& data) {$/;"	f	class:BinaryClassifier
norm	arm/moveClassifier/point.h	/^	float norm()$/;"	f	class:Point
norm	arm/moveClassifier_bak/binaryClassifier.cpp	/^float BinaryClassifier::norm(vector<float>& data) {$/;"	f	class:BinaryClassifier
norm	arm/moveClassifier_bak/point.h	/^	float norm()$/;"	f	class:Point
norm	arm/test/include/point.h	/^	float norm()$/;"	f	class:Point
norm	arm/test/src/binaryClassifier/binaryClassifier.cpp	/^float BinaryClassifier::norm(vector<float>& data) {$/;"	f	class:BinaryClassifier
norm	arm/test/src/util/point.h	/^	float norm()$/;"	f	class:Point
num_workers	gesture_detection/train.py	/^    num_workers=opt.nThreads)$/;"	v
operator ()	arm/moveClassifier/binaryClassifier.cpp	/^bool BinaryClassifier::operator() (Point& data) {$/;"	f	class:BinaryClassifier
operator ()	arm/moveClassifier/gesture.cpp	/^void Gesture::operator() (const float& data1, const float& data2, $/;"	f	class:Gesture
operator ()	arm/moveClassifier/moveClassifier.cpp	/^string MoveClassifier::operator()(vector<Point>& target, Serial& pc){$/;"	f	class:MoveClassifier
operator ()	arm/moveClassifier_bak/binaryClassifier.cpp	/^bool BinaryClassifier::operator() (Point& data) {$/;"	f	class:BinaryClassifier
operator ()	arm/moveClassifier_bak/classifier.cpp	/^string MoveClassifier::operator() (vector<vector<float> >& target, Serial& pc){$/;"	f	class:MoveClassifier
operator ()	arm/moveClassifier_bak/gesture.cpp	/^void Gesture::operator() (const float& data1, const float& data2, $/;"	f	class:Gesture
operator ()	arm/test/src/binaryClassifier/binaryClassifier.cpp	/^bool BinaryClassifier::operator() (Point& data) {$/;"	f	class:BinaryClassifier
operator ()	arm/test/src/moveClassifier/moveClassifier.cpp	/^string MoveClassifier::operator()(vector<Point>& target){$/;"	f	class:MoveClassifier
operator ()	arm/test/src/util/gesture.cpp	/^void Gesture::operator() (const float& data1, const float& data2, $/;"	f	class:Gesture
operator []	arm/moveClassifier/point.h	/^  float& operator[] (int& x) {$/;"	f	class:Point
operator []	arm/moveClassifier_bak/point.h	/^  float& operator[] (int& x) {$/;"	f	class:Point
operator []	arm/test/include/point.h	/^  float& operator[] (int& x) {$/;"	f	class:Point
operator []	arm/test/src/util/point.h	/^  float& operator[] (int& x) {$/;"	f	class:Point
opt	gesture_detection/action.py	/^opt = parser.parse()$/;"	v
opt	gesture_detection/main.py	/^opt = parser.parse()$/;"	v
opt	gesture_detection/predict.py	/^opt = parser.parse()$/;"	v
opt	gesture_detection/recorder.py	/^opt = parser.parse()$/;"	v
opt	gesture_detection/recorder_action.py	/^opt = parser.parse()$/;"	v
opt	gesture_detection/train.py	/^opt = parser.parse()$/;"	v
optimize_parameters	gesture_detection/models/base_model.py	/^    def optimize_parameters(self):$/;"	m	class:BaseModel
optimize_parameters	gesture_detection/models/binary_model.py	/^    def optimize_parameters(self):$/;"	m	class:BinaryModel
optimizer	video_detection/main.py	/^optimizer = torch.optim.Adam(model.parameters(),lr=LEARNING_RATE)$/;"	v
p	gesture_detection/visualizer/painter.py	/^    p = Painter()$/;"	v	class:Painter
pack_CCE	video_detection/util.py	/^    def pack_CCE(self, x, y, i):$/;"	m	class:Datamanager
pack_accu	video_detection/util.py	/^    def pack_accu(self, x, y, i):$/;"	m	class:Datamanager
painter	gesture_detection/main.py	/^painter = Painter(repr = opt.repr, display = opt.display, memorySize = opt.memorySize, ylim = opt.ylim)$/;"	v
parse	gesture_detection/options/action_options.py	/^    def parse(self):$/;"	m	class:ActionOptions
parse	gesture_detection/options/base_options.py	/^    def parse(self):$/;"	m	class:BaseOptions
parse	gesture_detection/options/record_options.py	/^    def parse(self):$/;"	m	class:RecorderOptions
parse	gesture_detection/options/train_options.py	/^    def parse(self):$/;"	m	class:TrainOptions
parse_model	gesture_detection/options/base_options.py	/^    def parse_model(self):$/;"	m	class:BaseOptions
parse_normal	gesture_detection/options/base_options.py	/^    def parse_normal(self):$/;"	m	class:BaseOptions
parser	gesture_detection/action.py	/^parser = ActionOptions()$/;"	v
parser	gesture_detection/main.py	/^parser = MainOptions()$/;"	v
parser	gesture_detection/predict.py	/^parser = PredictOptions()$/;"	v
parser	gesture_detection/recorder.py	/^parser = RecorderOptions()$/;"	v
parser	gesture_detection/recorder_action.py	/^parser = RecorderOptions()$/;"	v
parser	gesture_detection/train.py	/^parser = TrainOptions()$/;"	v
pitch	arm/moveClassifier/MPU9250.h	/^float pitch, yaw, roll;$/;"	v
pitch	arm/moveClassifier_bak/MPU9250.h	/^float pitch, yaw, roll;$/;"	v
pitch	arm/sensor/MPU9250.h	/^float pitch, yaw, roll;$/;"	v
plot	gesture_detection/visualizer/painter.py	/^    def plot(self):$/;"	m	class:Painter
plot	video_detection/util.py	/^    def plot(self, record, path):$/;"	m	class:Datamanager
predict	gesture_detection/classifier/DTW.py	/^    def predict(self, target):$/;"	m	class:Classifier
predict	gesture_detection/models/base_model.py	/^    def predict(self, data):$/;"	m	class:BaseModel
predict	gesture_detection/models/binary_model.py	/^    def predict(self, data):$/;"	m	class:BinaryModel
print	arm/moveClassifier/point.h	/^	void print(){$/;"	f	class:Point
print	arm/moveClassifier_bak/point.h	/^	void print(){$/;"	f	class:Point
print	arm/test/include/point.h	/^	void print(){$/;"	f	class:Point
print	arm/test/src/util/point.h	/^	void print(){$/;"	f	class:Point
print_networks	gesture_detection/models/base_model.py	/^    def print_networks(self, verbose):$/;"	m	class:BaseModel
print_options	gesture_detection/options/base_options.py	/^    def print_options(self):$/;"	m	class:BaseOptions
q	arm/moveClassifier/MPU9250.h	/^float q[4] = {1.0f, 0.0f, 0.0f, 0.0f};           \/\/ vector to hold quaternion$/;"	v
q	arm/moveClassifier_bak/MPU9250.h	/^float q[4] = {1.0f, 0.0f, 0.0f, 0.0f};           \/\/ vector to hold quaternion$/;"	v
q	arm/sensor/MPU9250.h	/^float q[4] = {1.0f, 0.0f, 0.0f, 0.0f};           \/\/ vector to hold quaternion$/;"	v
read	arm/moveClassifier/data.cpp	/^void MoveClassifier::read(){$/;"	f	class:MoveClassifier
read	arm/moveClassifier_bak/data.cpp	/^void MoveClassifier::read(){$/;"	f	class:MoveClassifier
read	arm/test/src/moveClassifier/data.cpp	/^void MoveClassifier::read(){$/;"	f	class:MoveClassifier
read	gesture_detection/classifier/DTW.py	/^    def read(self):$/;"	m	class:Classifier
read	gesture_detection/sensor/__init__.py	/^    def read(self):$/;"	m	class:Sensor
readAccelData	arm/moveClassifier/MPU9250.h	/^void readAccelData(int16_t * destination)$/;"	f	class:MPU9250
readAccelData	arm/moveClassifier_bak/MPU9250.h	/^void readAccelData(int16_t * destination)$/;"	f	class:MPU9250
readAccelData	arm/sensor/MPU9250.h	/^void readAccelData(int16_t * destination)$/;"	f	class:MPU9250
readByte	arm/moveClassifier/MPU9250.h	/^    char readByte(uint8_t address, uint8_t subAddress)$/;"	f	class:MPU9250
readByte	arm/moveClassifier_bak/MPU9250.h	/^    char readByte(uint8_t address, uint8_t subAddress)$/;"	f	class:MPU9250
readByte	arm/sensor/MPU9250.h	/^    char readByte(uint8_t address, uint8_t subAddress)$/;"	f	class:MPU9250
readBytes	arm/moveClassifier/MPU9250.h	/^    void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)$/;"	f	class:MPU9250
readBytes	arm/moveClassifier_bak/MPU9250.h	/^    void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)$/;"	f	class:MPU9250
readBytes	arm/sensor/MPU9250.h	/^    void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)$/;"	f	class:MPU9250
readGyroData	arm/moveClassifier/MPU9250.h	/^void readGyroData(int16_t * destination)$/;"	f	class:MPU9250
readGyroData	arm/moveClassifier_bak/MPU9250.h	/^void readGyroData(int16_t * destination)$/;"	f	class:MPU9250
readGyroData	arm/sensor/MPU9250.h	/^void readGyroData(int16_t * destination)$/;"	f	class:MPU9250
readMagData	arm/moveClassifier/MPU9250.h	/^void readMagData(int16_t * destination)$/;"	f	class:MPU9250
readMagData	arm/moveClassifier_bak/MPU9250.h	/^void readMagData(int16_t * destination)$/;"	f	class:MPU9250
readMagData	arm/sensor/MPU9250.h	/^void readMagData(int16_t * destination)$/;"	f	class:MPU9250
readTempData	arm/moveClassifier/MPU9250.h	/^int16_t readTempData()$/;"	f	class:MPU9250
readTempData	arm/moveClassifier_bak/MPU9250.h	/^int16_t readTempData()$/;"	f	class:MPU9250
readTempData	arm/sensor/MPU9250.h	/^int16_t readTempData()$/;"	f	class:MPU9250
read_data	arm/moveClassifier/sensor.h	/^Point read_data(Serial& pc, const int& time_laspe) {$/;"	f
read_data	arm/moveClassifier_bak/sensor.h	/^Point read_data(Serial& pc, const int& time_laspe) {$/;"	f
read_data	arm/sensor/sensor.h	/^Point read_data(Serial& pc, const int& time_laspe) {$/;"	f
record	video_detection/main.py	/^    record=dm.val_movie( model, train_dataloader, epoch)$/;"	v
recorder	gesture_detection/action.py	/^recorder = Recorder(opt)$/;"	v
recorder	gesture_detection/recorder.py	/^recorder = Recorder(opt)$/;"	v
recorder	gesture_detection/recorder_action.py	/^recorder = Recorder(opt)$/;"	v
reset	gesture_detection/filter/__init__.py	/^    def reset(self):$/;"	m	class:Filter
reset	gesture_detection/utils/accu_eval.py	/^    def reset(self):$/;"	m	class:AccuEval
reset	gesture_detection/utils/timer.py	/^    def reset(self):$/;"	m	class:Timer
reset	gesture_detection/visualizer/base_visualizer.py	/^    def reset(self):$/;"	m	class:BaseVisualizer
resetMPU9250	arm/moveClassifier/MPU9250.h	/^void resetMPU9250() {$/;"	f	class:MPU9250
resetMPU9250	arm/moveClassifier_bak/MPU9250.h	/^void resetMPU9250() {$/;"	f	class:MPU9250
resetMPU9250	arm/sensor/MPU9250.h	/^void resetMPU9250() {$/;"	f	class:MPU9250
result	video_detection/main.py	/^result = dm.test_movie( model, test_dataloader)$/;"	v
reverse	video_detection/util.py	/^    def reverse(self, x, i):$/;"	m	class:ActionDataLoader
reverse	video_detection/util.py	/^    def reverse(self, x, i):$/;"	m	class:MovieDataLoader
roll	arm/moveClassifier/MPU9250.h	/^float pitch, yaw, roll;$/;"	v
roll	arm/moveClassifier_bak/MPU9250.h	/^float pitch, yaw, roll;$/;"	v
roll	arm/sensor/MPU9250.h	/^float pitch, yaw, roll;$/;"	v
s	gesture_detection/test_serial.py	/^s = serial.Serial("\/dev\/cu.usbmodem1413", sys.argv[1])$/;"	v
save	gesture_detection/utils/vocabulary/__init__.py	/^    def save(self):$/;"	m	class:Vocabulary
save	gesture_detection/visualizer/painter.py	/^    def save(self, path):$/;"	m	class:Painter
save	video_detection/util.py	/^    def save(self, path):$/;"	m	class:Movie_Classifier
save	video_detection/util.py	/^    def save(self, path):$/;"	m	class:Vocabulary
save_networks	gesture_detection/models/base_model.py	/^    def save_networks(self, nEpoch):$/;"	m	class:BaseModel
save_options	gesture_detection/options/base_options.py	/^    def save_options(self, path):$/;"	m	class:BaseOptions
sensor	gesture_detection/action.py	/^sensor = Sensor(opt.n, opt.port, opt.freq)$/;"	v
sensor	gesture_detection/main.py	/^sensor = Sensor(opt.n, opt.port, opt.freq)$/;"	v
sensor	gesture_detection/predict.py	/^sensor = Sensor(opt.n, opt.port, opt.freq)$/;"	v
sensor	gesture_detection/recorder.py	/^sensor = Sensor(opt.n, opt.port, opt.freq)$/;"	v
sensor	gesture_detection/recorder_action.py	/^sensor = Sensor(opt.n, opt.port, opt.freq)$/;"	v
sensor	gesture_detection/sensor/__init__.py	/^    sensor = Sensor("\/dev\/cu.usbmodem1413", 921600)$/;"	v
set_input	gesture_detection/models/base_model.py	/^    def set_input(self, input):$/;"	m	class:BaseModel
set_input	gesture_detection/models/binary_model.py	/^    def set_input(self, input):$/;"	m	class:BinaryModel
set_requires_grad	gesture_detection/models/base_model.py	/^    def set_requires_grad(self, nets, requires_grad=False):$/;"	m	class:BaseModel
setup	gesture_detection/models/base_model.py	/^    def setup(self, parser=None):$/;"	m	class:BaseModel
speech	gesture_detection/predict.py	/^speech = Speech()$/;"	v
start_time	gesture_detection/utils/accu_eval.py	/^    start_time = time.time()$/;"	v	class:AccuEval
steps	gesture_detection/train.py	/^steps = 0$/;"	v
sum	arm/moveClassifier/sensor.h	/^float sum = 0;$/;"	v
sum	arm/moveClassifier_bak/sensor.h	/^float sum = 0;$/;"	v
sum	arm/sensor/sensor.h	/^float sum = 0;$/;"	v
sum	gesture_detection/mbed.cpp	/^float sum = 0;$/;"	v
sum	gesture_detection/mbed/main.cpp	/^float sum = 0;$/;"	v
sumCount	arm/moveClassifier/sensor.h	/^int sumCount = 0;$/;"	v
sumCount	arm/moveClassifier_bak/sensor.h	/^int sumCount = 0;$/;"	v
sumCount	arm/sensor/sensor.h	/^int sumCount = 0;$/;"	v
sumCount	gesture_detection/mbed.cpp	/^uint32_t sumCount = 0;$/;"	v
sumCount	gesture_detection/mbed/main.cpp	/^uint32_t sumCount = 0;$/;"	v
t	arm/moveClassifier/sensor.h	/^Timer t;$/;"	v
t	arm/moveClassifier_bak/sensor.h	/^Timer t;$/;"	v
t	arm/sensor/sensor.h	/^Timer t;$/;"	v
t	gesture_detection/mbed.cpp	/^Timer t;$/;"	v
t	gesture_detection/mbed/main.cpp	/^Timer t;$/;"	v
tb_setting	video_detection/util.py	/^    def tb_setting(self, directory):$/;"	m	class:Datamanager
tempCount	arm/moveClassifier/MPU9250.h	/^int16_t tempCount;   \/\/ Stores the real internal chip temperature in degrees Celsius$/;"	v
tempCount	arm/moveClassifier_bak/MPU9250.h	/^int16_t tempCount;   \/\/ Stores the real internal chip temperature in degrees Celsius$/;"	v
tempCount	arm/sensor/MPU9250.h	/^int16_t tempCount;   \/\/ Stores the real internal chip temperature in degrees Celsius$/;"	v
temperature	arm/moveClassifier/MPU9250.h	/^float temperature;$/;"	v
temperature	arm/moveClassifier_bak/MPU9250.h	/^float temperature;$/;"	v
temperature	arm/sensor/MPU9250.h	/^float temperature;$/;"	v
test	gesture_detection/models/base_model.py	/^    def test(self):$/;"	m	class:BaseModel
test_dataloader	video_detection/main.py	/^test_dataloader = dm.get_test_data_movie('.\/data\/test\/movie\/',batch_size=BATCH_SIZE, step_n = STEP_N, image_size = IMAGE_SIZE, save_path = SAVE_TEST_PATH)$/;"	v
test_image	video_detection/util.py	/^    def test_image(self,model,dataloader, print_every= 2):$/;"	m	class:Datamanager
test_movie	video_detection/util.py	/^    def test_movie(self,model,dataloader, print_every= 2):$/;"	m	class:Datamanager
timeSince	video_detection/util.py	/^    def timeSince(self,since, percent):$/;"	m	class:Datamanager
timer	gesture_detection/utils/timer.py	/^    timer = Timer()$/;"	v	class:Timer
train	gesture_detection/models/base_model.py	/^    def train(self):$/;"	m	class:BaseModel
trainDataLoader	gesture_detection/train.py	/^trainDataLoader= torch.utils.data.DataLoader($/;"	v
trainDataset	gesture_detection/train.py	/^trainDataset = createDataset(opt, split = 'train', nInput = opt.nInput)$/;"	v
trainVisualizer	gesture_detection/train.py	/^trainVisualizer = ProgressVisualizer(opt, trainDataLoader.dataset).reset()$/;"	v
train_dataloader	video_detection/main.py	/^train_dataloader = dm.get_data_movie('.\/data\/train\/movie\/','.\/data\/train\/tag.txt',batch_size=BATCH_SIZE, step_n = STEP_N, image_size = IMAGE_SIZE, save_path = SAVE_TRAIN_PATH)$/;"	v
train_image	video_detection/util.py	/^    def train_image(self, model, dataloader, epoch, optimizer, print_every= 2):$/;"	m	class:Datamanager
train_movie	video_detection/util.py	/^    def train_movie(self, model, dataloader, epoch, optimizer, print_every= 2):$/;"	m	class:Datamanager
uint	arm/moveClassifier/dtw.h	/^typedef unsigned int uint;$/;"	t
uint	arm/moveClassifier_bak/vectordtw.h	/^typedef unsigned int uint;$/;"	t
uint	arm/test/include/dtw.h	/^typedef unsigned int uint;$/;"	t
uint	arm/test/src/util/dtw.h	/^typedef unsigned int uint;$/;"	t
update	gesture_detection/filter/__init__.py	/^    def update(self, data):$/;"	m	class:Filter
update	gesture_detection/options/base_options.py	/^    def update(self):$/;"	m	class:BaseOptions
update	gesture_detection/utils/accu_eval.py	/^    def update(self, pred, gnd):$/;"	m	class:AccuEval
update_learning_rate	gesture_detection/models/base_model.py	/^    def update_learning_rate(self):$/;"	m	class:BaseModel
v	gesture_detection/visualizer/sensor_visualizer.py	/^    v = SensorVisualizer()$/;"	v	class:SensorVisualizer
v0	arm/moveClassifier/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v0	arm/moveClassifier_bak/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v0	arm/test/include/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v0	arm/test/src/util/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v1	arm/moveClassifier/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v1	arm/moveClassifier_bak/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v1	arm/test/include/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v1	arm/test/src/util/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v10	arm/moveClassifier/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v10	arm/moveClassifier_bak/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v10	arm/test/include/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v10	arm/test/src/util/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v11	arm/moveClassifier/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v11	arm/moveClassifier_bak/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v11	arm/test/include/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v11	arm/test/src/util/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v12	arm/moveClassifier/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v12	arm/moveClassifier_bak/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v12	arm/test/include/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v12	arm/test/src/util/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v13	arm/moveClassifier/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v13	arm/moveClassifier_bak/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v13	arm/test/include/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v13	arm/test/src/util/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v14	arm/moveClassifier/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v14	arm/moveClassifier_bak/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v14	arm/test/include/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v14	arm/test/src/util/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v15	arm/moveClassifier/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v15	arm/moveClassifier_bak/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v15	arm/test/include/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v15	arm/test/src/util/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v2	arm/moveClassifier/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v2	arm/moveClassifier_bak/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v2	arm/test/include/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v2	arm/test/src/util/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v3	arm/moveClassifier/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v3	arm/moveClassifier_bak/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v3	arm/test/include/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v3	arm/test/src/util/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v4	arm/moveClassifier/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v4	arm/moveClassifier_bak/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v4	arm/test/include/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v4	arm/test/src/util/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v5	arm/moveClassifier/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v5	arm/moveClassifier_bak/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v5	arm/test/include/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v5	arm/test/src/util/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v6	arm/moveClassifier/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v6	arm/moveClassifier_bak/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v6	arm/test/include/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v6	arm/test/src/util/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v7	arm/moveClassifier/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v7	arm/moveClassifier_bak/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v7	arm/test/include/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v7	arm/test/src/util/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v8	arm/moveClassifier/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v8	arm/moveClassifier_bak/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v8	arm/test/include/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v8	arm/test/src/util/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v9	arm/moveClassifier/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v9	arm/moveClassifier_bak/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v9	arm/test/include/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
v9	arm/test/src/util/point.h	/^	float v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15;$/;"	m	class:Point
valDataLoader	gesture_detection/train.py	/^valDataLoader= torch.utils.data.DataLoader($/;"	v
valDataset	gesture_detection/train.py	/^valDataset = createDataset(opt, split = 'val', nInput = opt.nInput)$/;"	v
valVisualizer	gesture_detection/train.py	/^valVisualizer = ProgressVisualizer(opt, valDataLoader.dataset).reset()$/;"	v
val_image	video_detection/util.py	/^    def val_image(self,model,dataloader, epoch, print_every= 2):$/;"	m	class:Datamanager
val_movie	video_detection/util.py	/^    def val_movie(self, model, dataloader, epoch, print_every= 2):$/;"	m	class:Datamanager
visualizer	gesture_detection/action.py	/^visualizer = SensorVisualizer(repr = opt.repr)$/;"	v
visualizer	gesture_detection/main.py	/^visualizer = SensorVisualizer(repr = opt.repr)$/;"	v
visualizer	gesture_detection/predict.py	/^visualizer = SensorVisualizer(repr = opt.repr)$/;"	v
visualizer	gesture_detection/recorder.py	/^visualizer = SensorVisualizer(repr = opt.repr)$/;"	v
visualizer	gesture_detection/recorder_action.py	/^visualizer = SensorVisualizer(repr = opt.repr)$/;"	v
write	video_detection/util.py	/^    def write(self,path,decoded_words,name,video):$/;"	m	class:Datamanager
writeByte	arm/moveClassifier/MPU9250.h	/^    void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)$/;"	f	class:MPU9250
writeByte	arm/moveClassifier_bak/MPU9250.h	/^    void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)$/;"	f	class:MPU9250
writeByte	arm/sensor/MPU9250.h	/^    void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)$/;"	f	class:MPU9250
x_dim_	arm/moveClassifier_bak/dtw.h	/^    size_t x_dim_;$/;"	m	class:DTW::SimpleDTW
y_dim_	arm/moveClassifier_bak/dtw.h	/^    size_t y_dim_;$/;"	m	class:DTW::SimpleDTW
yaw	arm/moveClassifier/MPU9250.h	/^float pitch, yaw, roll;$/;"	v
yaw	arm/moveClassifier_bak/MPU9250.h	/^float pitch, yaw, roll;$/;"	v
yaw	arm/sensor/MPU9250.h	/^float pitch, yaw, roll;$/;"	v
zeta	arm/moveClassifier/MPU9250.h	/^float zeta = sqrt(3.0f \/ 4.0f) * GyroMeasDrift;  \/\/ compute zeta, the other free parameter in the Madgwick scheme usually set to a small or zero value$/;"	v
zeta	arm/moveClassifier_bak/MPU9250.h	/^float zeta = sqrt(3.0f \/ 4.0f) * GyroMeasDrift;  \/\/ compute zeta, the other free parameter in the Madgwick scheme usually set to a small or zero value$/;"	v
zeta	arm/sensor/MPU9250.h	/^float zeta = sqrt(3.0f \/ 4.0f) * GyroMeasDrift;  \/\/ compute zeta, the other free parameter in the Madgwick scheme usually set to a small or zero value$/;"	v
~SimpleDTW	arm/moveClassifier_bak/dtw.h	/^    ~SimpleDTW() {}$/;"	f	class:DTW::SimpleDTW
